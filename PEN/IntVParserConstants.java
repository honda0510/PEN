/* Generated By:JJTree&JavaCC: Do not edit this line. IntVParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface IntVParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int ADDOP = 8;
  /** RegularExpression Id. */
  int SUBOP = 9;
  /** RegularExpression Id. */
  int MULOP = 10;
  /** RegularExpression Id. */
  int DIVOP = 11;
  /** RegularExpression Id. */
  int DIVOP2 = 12;
  /** RegularExpression Id. */
  int SUROP = 13;
  /** RegularExpression Id. */
  int ASGNOP = 14;
  /** RegularExpression Id. */
  int INOP = 15;
  /** RegularExpression Id. */
  int EQOP = 16;
  /** RegularExpression Id. */
  int GTOP = 17;
  /** RegularExpression Id. */
  int GEOP = 18;
  /** RegularExpression Id. */
  int LSOP = 19;
  /** RegularExpression Id. */
  int LEOP = 20;
  /** RegularExpression Id. */
  int NTOP = 21;
  /** RegularExpression Id. */
  int ANDOP = 22;
  /** RegularExpression Id. */
  int OROP = 23;
  /** RegularExpression Id. */
  int NOTOP = 24;
  /** RegularExpression Id. */
  int LC = 25;
  /** RegularExpression Id. */
  int RC = 26;
  /** RegularExpression Id. */
  int LD = 27;
  /** RegularExpression Id. */
  int RD = 28;
  /** RegularExpression Id. */
  int LP = 29;
  /** RegularExpression Id. */
  int RP = 30;
  /** RegularExpression Id. */
  int SM = 31;
  /** RegularExpression Id. */
  int CM = 32;
  /** RegularExpression Id. */
  int CM2 = 33;
  /** RegularExpression Id. */
  int PN = 34;
  /** RegularExpression Id. */
  int TRUE = 35;
  /** RegularExpression Id. */
  int FALSE = 36;
  /** RegularExpression Id. */
  int EOF_STR = 37;
  /** RegularExpression Id. */
  int LF_STR = 38;
  /** RegularExpression Id. */
  int CR_STR = 39;
  /** RegularExpression Id. */
  int NL_STR = 40;
  /** RegularExpression Id. */
  int HT_STR = 41;
  /** RegularExpression Id. */
  int NULL_STR = 42;
  /** RegularExpression Id. */
  int VARGLOBAL = 43;
  /** RegularExpression Id. */
  int VARINT = 44;
  /** RegularExpression Id. */
  int VARDOUBLE = 45;
  /** RegularExpression Id. */
  int VARSTRING = 46;
  /** RegularExpression Id. */
  int VARBOOLEAN = 47;
  /** RegularExpression Id. */
  int VARDFP = 48;
  /** RegularExpression Id. */
  int PROCEDURAL = 49;
  /** RegularExpression Id. */
  int ENDPROCEDURAL = 50;
  /** RegularExpression Id. */
  int BREAKPROCEDURAL = 51;
  /** RegularExpression Id. */
  int FUNCTION = 52;
  /** RegularExpression Id. */
  int ENDFUNCTION = 53;
  /** RegularExpression Id. */
  int BREAKFUNCTION = 54;
  /** RegularExpression Id. */
  int RETURN = 55;
  /** RegularExpression Id. */
  int IF = 56;
  /** RegularExpression Id. */
  int ENDIF = 57;
  /** RegularExpression Id. */
  int THEN = 58;
  /** RegularExpression Id. */
  int ELSE = 59;
  /** RegularExpression Id. */
  int ELSEIF = 60;
  /** RegularExpression Id. */
  int WHILE = 61;
  /** RegularExpression Id. */
  int DOWHILE = 62;
  /** RegularExpression Id. */
  int DOWHILE2 = 63;
  /** RegularExpression Id. */
  int DOWHILE3 = 64;
  /** RegularExpression Id. */
  int FOR = 65;
  /** RegularExpression Id. */
  int FOR2 = 66;
  /** RegularExpression Id. */
  int FOR3 = 67;
  /** RegularExpression Id. */
  int FOR4 = 68;
  /** RegularExpression Id. */
  int FORADD = 69;
  /** RegularExpression Id. */
  int FORSUB = 70;
  /** RegularExpression Id. */
  int ENDLOOP = 71;
  /** RegularExpression Id. */
  int SWITCH = 72;
  /** RegularExpression Id. */
  int ENDSWITCH = 73;
  /** RegularExpression Id. */
  int CASE = 74;
  /** RegularExpression Id. */
  int CASEDEFAULT = 75;
  /** RegularExpression Id. */
  int PUTLN = 76;
  /** RegularExpression Id. */
  int PUT = 77;
  /** RegularExpression Id. */
  int BREAK = 78;
  /** RegularExpression Id. */
  int INPUT = 79;
  /** RegularExpression Id. */
  int GET = 80;
  /** RegularExpression Id. */
  int RANDOM = 81;
  /** RegularExpression Id. */
  int SIN = 82;
  /** RegularExpression Id. */
  int COS = 83;
  /** RegularExpression Id. */
  int TAN = 84;
  /** RegularExpression Id. */
  int SQRT = 85;
  /** RegularExpression Id. */
  int FLOOR = 86;
  /** RegularExpression Id. */
  int CEIL = 87;
  /** RegularExpression Id. */
  int ROUND = 88;
  /** RegularExpression Id. */
  int ABS = 89;
  /** RegularExpression Id. */
  int INT = 90;
  /** RegularExpression Id. */
  int LOG = 91;
  /** RegularExpression Id. */
  int DFP = 92;
  /** RegularExpression Id. */
  int LENGTH = 93;
  /** RegularExpression Id. */
  int APPEND = 94;
  /** RegularExpression Id. */
  int SUBSTRING = 95;
  /** RegularExpression Id. */
  int INSERT = 96;
  /** RegularExpression Id. */
  int REPLACE = 97;
  /** RegularExpression Id. */
  int EXTRACT = 98;
  /** RegularExpression Id. */
  int Str2Int = 99;
  /** RegularExpression Id. */
  int Int2Str = 100;
  /** RegularExpression Id. */
  int Compare = 101;
  /** RegularExpression Id. */
  int gOpenWindow = 102;
  /** RegularExpression Id. */
  int gOpenGWindow = 103;
  /** RegularExpression Id. */
  int gCloseWindow = 104;
  /** RegularExpression Id. */
  int gClearWindow = 105;
  /** RegularExpression Id. */
  int gSaveWindow = 106;
  /** RegularExpression Id. */
  int gSetOrigin = 107;
  /** RegularExpression Id. */
  int gSetMap = 108;
  /** RegularExpression Id. */
  int gSetDotShape = 109;
  /** RegularExpression Id. */
  int gSetLineColor = 110;
  /** RegularExpression Id. */
  int gSetFillColor = 111;
  /** RegularExpression Id. */
  int gSetLineShape = 112;
  /** RegularExpression Id. */
  int gSetLineWidth = 113;
  /** RegularExpression Id. */
  int gSetArrowType = 114;
  /** RegularExpression Id. */
  int gSetArrowDir = 115;
  /** RegularExpression Id. */
  int gSetTextColor = 116;
  /** RegularExpression Id. */
  int gSetFont = 117;
  /** RegularExpression Id. */
  int gSetFontType = 118;
  /** RegularExpression Id. */
  int gSetFontSize = 119;
  /** RegularExpression Id. */
  int gDrawPoint = 120;
  /** RegularExpression Id. */
  int gDrawLine = 121;
  /** RegularExpression Id. */
  int gDrawText = 122;
  /** RegularExpression Id. */
  int gDrawCircle = 123;
  /** RegularExpression Id. */
  int gFillCircle = 124;
  /** RegularExpression Id. */
  int gDrawOval = 125;
  /** RegularExpression Id. */
  int gFillOval = 126;
  /** RegularExpression Id. */
  int gDrawBox = 127;
  /** RegularExpression Id. */
  int gFillBox = 128;
  /** RegularExpression Id. */
  int gDrawArc = 129;
  /** RegularExpression Id. */
  int gFillArc = 130;
  /** RegularExpression Id. */
  int gDrawPolygon = 131;
  /** RegularExpression Id. */
  int gFillPolygon = 132;
  /** RegularExpression Id. */
  int gDrawPolyline = 133;
  /** RegularExpression Id. */
  int gDrawImage = 134;
  /** RegularExpression Id. */
  int OPENR = 135;
  /** RegularExpression Id. */
  int OPENW = 136;
  /** RegularExpression Id. */
  int OPENA = 137;
  /** RegularExpression Id. */
  int CLOSE = 138;
  /** RegularExpression Id. */
  int GETSTR = 139;
  /** RegularExpression Id. */
  int GETLINE = 140;
  /** RegularExpression Id. */
  int PUTSTR = 141;
  /** RegularExpression Id. */
  int PUTLINE = 142;
  /** RegularExpression Id. */
  int FLUSH = 143;
  /** RegularExpression Id. */
  int ISFILE = 144;
  /** RegularExpression Id. */
  int RENAME = 145;
  /** RegularExpression Id. */
  int REMOVE = 146;
  /** RegularExpression Id. */
  int SLEEP = 147;
  /** RegularExpression Id. */
  int DIGIT = 148;
  /** RegularExpression Id. */
  int LETTER = 149;
  /** RegularExpression Id. */
  int LITERAL = 150;
  /** RegularExpression Id. */
  int FLOAT_LITERAL = 151;
  /** RegularExpression Id. */
  int IDENT = 152;
  /** RegularExpression Id. */
  int STRLIT = 154;
  /** RegularExpression Id. */
  int COMMENT = 161;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int STR = 1;
  /** Lexical state. */
  int COMM = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"|\"",
    "\"\\uff5c\"",
    "\"\\u3000\"",
    "<ADDOP>",
    "<SUBOP>",
    "<MULOP>",
    "\"\\u00f7\"",
    "\"/\"",
    "<SUROP>",
    "<ASGNOP>",
    "\"->\"",
    "<EQOP>",
    "<GTOP>",
    "<GEOP>",
    "<LSOP>",
    "<LEOP>",
    "<NTOP>",
    "\"\\u304b\\u3064\"",
    "\"\\u307e\\u305f\\u306f\"",
    "\"\\u3067\\u306a\\u3044\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\"\\n\"",
    "<CM>",
    "\"\\u3068\"",
    "\".\"",
    "<TRUE>",
    "<FALSE>",
    "\"EOF\"",
    "\"LF\"",
    "\"CR\"",
    "\"NL\"",
    "\"HT\"",
    "\"NULL\"",
    "\"\\u30b0\\u30ed\\u30fc\\u30d0\\u30eb\\u5909\\u6570\"",
    "\"\\u6574\\u6570\"",
    "\"\\u5b9f\\u6570\"",
    "\"\\u6587\\u5b57\\u5217\"",
    "\"\\u771f\\u507d\"",
    "\"DFP\"",
    "\"\\u624b\\u7d9a\\u304d\"",
    "<ENDPROCEDURAL>",
    "\"\\u624b\\u7d9a\\u304d\\u3092\\u629c\\u3051\\u308b\"",
    "\"\\u95a2\\u6570\"",
    "<ENDFUNCTION>",
    "\"\\u95a2\\u6570\\u3092\\u629c\\u3051\\u308b\"",
    "\"\\u3092\\u8fd4\\u3059\"",
    "\"\\u3082\\u3057\"",
    "<ENDIF>",
    "<THEN>",
    "<ELSE>",
    "<ELSEIF>",
    "<WHILE>",
    "<DOWHILE>",
    "<DOWHILE2>",
    "<DOWHILE3>",
    "\"\\u3092\"",
    "\"\\u304b\\u3089\"",
    "\"\\u307e\\u3067\"",
    "\"\\u305a\\u3064\"",
    "<FORADD>",
    "<FORSUB>",
    "<ENDLOOP>",
    "\"\\u306e\\u5024\\u306b\\u5fdc\\u3058\\u3066\"",
    "\"\\u306e\\u3044\\u305a\\u308c\\u304b\\u3092\\u5b9f\\u884c\\u3059\\u308b\"",
    "\"\\u306e\\u5834\\u5408\\uff1a\"",
    "\"\\u305d\\u306e\\u4ed6\\u306e\\u5834\\u5408\\uff1a\"",
    "<PUTLN>",
    "<PUT>",
    "<BREAK>",
    "\"\\u3092\\u5165\\u529b\\u3059\\u308b\"",
    "<GET>",
    "<RANDOM>",
    "<SIN>",
    "<COS>",
    "<TAN>",
    "<SQRT>",
    "<FLOOR>",
    "<CEIL>",
    "<ROUND>",
    "<ABS>",
    "<INT>",
    "<LOG>",
    "<DFP>",
    "<LENGTH>",
    "<APPEND>",
    "<SUBSTRING>",
    "<INSERT>",
    "<REPLACE>",
    "<EXTRACT>",
    "<Str2Int>",
    "<Int2Str>",
    "<Compare>",
    "<gOpenWindow>",
    "<gOpenGWindow>",
    "<gCloseWindow>",
    "<gClearWindow>",
    "<gSaveWindow>",
    "<gSetOrigin>",
    "<gSetMap>",
    "<gSetDotShape>",
    "<gSetLineColor>",
    "<gSetFillColor>",
    "<gSetLineShape>",
    "<gSetLineWidth>",
    "<gSetArrowType>",
    "<gSetArrowDir>",
    "<gSetTextColor>",
    "<gSetFont>",
    "<gSetFontType>",
    "<gSetFontSize>",
    "<gDrawPoint>",
    "<gDrawLine>",
    "<gDrawText>",
    "<gDrawCircle>",
    "<gFillCircle>",
    "<gDrawOval>",
    "<gFillOval>",
    "<gDrawBox>",
    "<gFillBox>",
    "<gDrawArc>",
    "<gFillArc>",
    "<gDrawPolygon>",
    "<gFillPolygon>",
    "<gDrawPolyline>",
    "<gDrawImage>",
    "<OPENR>",
    "<OPENW>",
    "<OPENA>",
    "<CLOSE>",
    "<GETSTR>",
    "<GETLINE>",
    "<PUTSTR>",
    "<PUTLINE>",
    "<FLUSH>",
    "<ISFILE>",
    "<RENAME>",
    "<REMOVE>",
    "<SLEEP>",
    "<DIGIT>",
    "<LETTER>",
    "<LITERAL>",
    "<FLOAT_LITERAL>",
    "<IDENT>",
    "<token of kind 153>",
    "<STRLIT>",
    "<token of kind 155>",
    "\"\\\\n\"",
    "\"\\\\r\"",
    "\"\\\\t\"",
    "<token of kind 159>",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 162>",
  };

}
