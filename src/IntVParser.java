/* IntVParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. IntVParser.java */
public class IntVParser/*@bgen(jjtree)*/implements IntVParserTreeConstants, IntVParserConstants {/*@bgen(jjtree)*/
  protected JJTIntVParserState jjtree = new JJTIntVParserState();public int nParseErrors = 0;
        private MainGUI gui;

        public void setMainGUI(MainGUI gui){
                this.gui = gui;
        }

        public String str2Half(String str, int line){
                StringBuffer sb = new StringBuffer();
                for(int i = 0; i < str.length(); i++){
                        int c = (int)str.charAt(i);
                        if((c >= 65345 && c <= 65370) || (c >= 65313 && c <= 65338) ){
                                                if(gui.penPro.containsKey(PenProperties.EXECUTER_VAR_NAMES) == false || Integer.parseInt(gui.penPro.getProperty(PenProperties.EXECUTER_VAR_NAMES)) == 0) {
                                                        throw new VarNameError(String.valueOf((char) c), line);
                                        } else if(Integer.parseInt(gui.penPro.getProperty(PenProperties.EXECUTER_VAR_NAMES)) == 2) {
                                        c -= 65248;
                                                }
                                }
                        sb.append((char)c);
                }
                return sb.toString();
        }

  final public void IntVUnit() throws ParseException {
    trace_call("IntVUnit");
    try {/*@bgen(jjtree) IntVUnit */
        ASTIntVUnit jjtn000 = new ASTIntVUnit(JJTINTVUNIT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
      try {
        label_1:
        while (true) {
          ;
          try {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case VARINT:
            case VARLONG:
            case VARDOUBLE:
            case VARSTRING:
            case VARBOOLEAN:{
              VarDecl();
              break;
              }
            case PROCEDURAL:
            case FUNCTION:{
              Function();
              break;
              }
            case SUBOP:
            case LP:
            case SM:
            case TRUE:
            case FALSE:
            case EOF_STR:
            case LF_STR:
            case CR_STR:
            case NL_STR:
            case HT_STR:
            case NULL_STR:
            case IF:
            case DOWHILE:
            case INFINITE:
            case CASEDEFAULT:
            case BREAK:
            case GET:
            case RANDOM:
            case SIN:
            case COS:
            case TAN:
            case SQRT:
            case FLOOR:
            case CEIL:
            case ROUND:
            case ABS:
            case INT:
            case LONG:
            case LOG:
            case LENGTH:
            case APPEND:
            case SUBSTRING:
            case INSERT:
            case REPLACE:
            case EXTRACT:
            case Str2Int:
            case Int2Str:
            case Compare:
            case gOpenWindow:
            case gOpenGWindow:
            case gCloseWindow:
            case gClearWindow:
            case gSaveWindow:
            case gSetOrigin:
            case gSetMap:
            case gSetDotShape:
            case gSetLineColor:
            case gSetFillColor:
            case gSetLineShape:
            case gSetLineWidth:
            case gSetArrowType:
            case gSetArrowDir:
            case gSetTextColor:
            case gSetFont:
            case gSetFontType:
            case gSetFontSize:
            case gDrawPoint:
            case gDrawLine:
            case gDrawText:
            case gDrawCircle:
            case gFillCircle:
            case gDrawOval:
            case gFillOval:
            case gDrawBox:
            case gFillBox:
            case gDrawArc:
            case gFillArc:
            case gDrawPolygon:
            case gFillPolygon:
            case gDrawPolyline:
            case gDrawImage:
            case gSetRepaintFlag:
            case gRepaint:
            case OPENR:
            case OPENW:
            case OPENA:
            case CLOSE:
            case GETSTR:
            case GETLINE:
            case PUTSTR:
            case PUTLINE:
            case FLUSH:
            case ISFILE:
            case RENAME:
            case REMOVE:
            case SLEEP:
            case LITERAL:
            case FLOAT_LITERAL:
            case IDENT:
            case STRLIT:{
              Stat();
              break;
              }
            case 0:{
              jj_consume_token(0);
{if ("" != null) return;}
              break;
              }
            default:
              jj_la1[0] = jj_gen;
              ErrorOccur();
            }
          } catch (ParseException e) {
++nParseErrors;
                        gui.consoleAppend.appendAll("### " + e.getMessage() + "\n");
                        {if (true) throw new ParseException();}
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("IntVUnit");
    }
  }

  void ErrorOccur() throws ParseException {
    trace_call("ErrorOccur");
    try {/*@bgen(jjtree) ErrorOccur */
     ASTErrorOccur jjtn000 = new ASTErrorOccur(JJTERROROCCUR);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {ParseException e = generateParseException();
        throw e;/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
    } finally {
      trace_return("ErrorOccur");
    }
  }

  final public void Function() throws ParseException {
    trace_call("Function");
    try {/*@bgen(jjtree) Function */
  ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FUNCTION:{
          jj_consume_token(FUNCTION);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case VARINT:{
            jj_consume_token(VARINT);
jjtn000.decl = Declaration.INT;
            break;
            }
          case VARLONG:{
            jj_consume_token(VARLONG);
jjtn000.decl = Declaration.LONG;
            break;
            }
          case VARDOUBLE:{
            jj_consume_token(VARDOUBLE);
jjtn000.decl = Declaration.DOUBLE;
            break;
            }
          case VARSTRING:{
            jj_consume_token(VARSTRING);
jjtn000.decl = Declaration.STRING;
            break;
            }
          case VARBOOLEAN:{
            jj_consume_token(VARBOOLEAN);
jjtn000.decl = Declaration.BOOLEAN;
            break;
            }
          default:
            jj_la1[1] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          t = jj_consume_token(IDENT);
          jj_consume_token(LP);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case VARINT:
          case VARLONG:
          case VARDOUBLE:
          case VARSTRING:
          case VARBOOLEAN:{
            FunctionVar();
            break;
            }
          default:
            jj_la1[2] = jj_gen;
            ;
          }
          jj_consume_token(RP);
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
ASTBlock jjtn001 = new ASTBlock(JJTBLOCK);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
          try {
            label_2:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case SUBOP:
              case LP:
              case SM:
              case TRUE:
              case FALSE:
              case EOF_STR:
              case LF_STR:
              case CR_STR:
              case NL_STR:
              case HT_STR:
              case NULL_STR:
              case VARINT:
              case VARLONG:
              case VARDOUBLE:
              case VARSTRING:
              case VARBOOLEAN:
              case IF:
              case DOWHILE:
              case INFINITE:
              case CASEDEFAULT:
              case BREAK:
              case GET:
              case RANDOM:
              case SIN:
              case COS:
              case TAN:
              case SQRT:
              case FLOOR:
              case CEIL:
              case ROUND:
              case ABS:
              case INT:
              case LONG:
              case LOG:
              case LENGTH:
              case APPEND:
              case SUBSTRING:
              case INSERT:
              case REPLACE:
              case EXTRACT:
              case Str2Int:
              case Int2Str:
              case Compare:
              case gOpenWindow:
              case gOpenGWindow:
              case gCloseWindow:
              case gClearWindow:
              case gSaveWindow:
              case gSetOrigin:
              case gSetMap:
              case gSetDotShape:
              case gSetLineColor:
              case gSetFillColor:
              case gSetLineShape:
              case gSetLineWidth:
              case gSetArrowType:
              case gSetArrowDir:
              case gSetTextColor:
              case gSetFont:
              case gSetFontType:
              case gSetFontSize:
              case gDrawPoint:
              case gDrawLine:
              case gDrawText:
              case gDrawCircle:
              case gFillCircle:
              case gDrawOval:
              case gFillOval:
              case gDrawBox:
              case gFillBox:
              case gDrawArc:
              case gFillArc:
              case gDrawPolygon:
              case gFillPolygon:
              case gDrawPolyline:
              case gDrawImage:
              case gSetRepaintFlag:
              case gRepaint:
              case OPENR:
              case OPENW:
              case OPENA:
              case CLOSE:
              case GETSTR:
              case GETLINE:
              case PUTSTR:
              case PUTLINE:
              case FLUSH:
              case ISFILE:
              case RENAME:
              case REMOVE:
              case SLEEP:
              case LITERAL:
              case FLOAT_LITERAL:
              case IDENT:
              case STRLIT:{
                ;
                break;
                }
              default:
                jj_la1[3] = jj_gen;
                break label_2;
              }
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case VARINT:
              case VARLONG:
              case VARDOUBLE:
              case VARSTRING:
              case VARBOOLEAN:{
                VarDecl();
                break;
                }
              case SUBOP:
              case LP:
              case SM:
              case TRUE:
              case FALSE:
              case EOF_STR:
              case LF_STR:
              case CR_STR:
              case NL_STR:
              case HT_STR:
              case NULL_STR:
              case IF:
              case DOWHILE:
              case INFINITE:
              case CASEDEFAULT:
              case BREAK:
              case GET:
              case RANDOM:
              case SIN:
              case COS:
              case TAN:
              case SQRT:
              case FLOOR:
              case CEIL:
              case ROUND:
              case ABS:
              case INT:
              case LONG:
              case LOG:
              case LENGTH:
              case APPEND:
              case SUBSTRING:
              case INSERT:
              case REPLACE:
              case EXTRACT:
              case Str2Int:
              case Int2Str:
              case Compare:
              case gOpenWindow:
              case gOpenGWindow:
              case gCloseWindow:
              case gClearWindow:
              case gSaveWindow:
              case gSetOrigin:
              case gSetMap:
              case gSetDotShape:
              case gSetLineColor:
              case gSetFillColor:
              case gSetLineShape:
              case gSetLineWidth:
              case gSetArrowType:
              case gSetArrowDir:
              case gSetTextColor:
              case gSetFont:
              case gSetFontType:
              case gSetFontSize:
              case gDrawPoint:
              case gDrawLine:
              case gDrawText:
              case gDrawCircle:
              case gFillCircle:
              case gDrawOval:
              case gFillOval:
              case gDrawBox:
              case gFillBox:
              case gDrawArc:
              case gFillArc:
              case gDrawPolygon:
              case gFillPolygon:
              case gDrawPolyline:
              case gDrawImage:
              case gSetRepaintFlag:
              case gRepaint:
              case OPENR:
              case OPENW:
              case OPENA:
              case CLOSE:
              case GETSTR:
              case GETLINE:
              case PUTSTR:
              case PUTLINE:
              case FLUSH:
              case ISFILE:
              case RENAME:
              case REMOVE:
              case SLEEP:
              case LITERAL:
              case FLOAT_LITERAL:
              case IDENT:
              case STRLIT:{
                Stat();
                break;
                }
              default:
                jj_la1[4] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          } catch (Throwable jjte001) {
if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
          } finally {
if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
          }
          jj_consume_token(ENDFUNCTION);
          break;
          }
        case PROCEDURAL:{
          jj_consume_token(PROCEDURAL);
jjtn000.decl = Declaration.PROCEDURAL;
          t = jj_consume_token(IDENT);
          jj_consume_token(LP);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case VARINT:
          case VARLONG:
          case VARDOUBLE:
          case VARSTRING:
          case VARBOOLEAN:{
            FunctionVar();
            break;
            }
          default:
            jj_la1[5] = jj_gen;
            ;
          }
          jj_consume_token(RP);
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
ASTBlock jjtn002 = new ASTBlock(JJTBLOCK);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
          try {
            label_3:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case SUBOP:
              case LP:
              case SM:
              case TRUE:
              case FALSE:
              case EOF_STR:
              case LF_STR:
              case CR_STR:
              case NL_STR:
              case HT_STR:
              case NULL_STR:
              case VARINT:
              case VARLONG:
              case VARDOUBLE:
              case VARSTRING:
              case VARBOOLEAN:
              case IF:
              case DOWHILE:
              case INFINITE:
              case CASEDEFAULT:
              case BREAK:
              case GET:
              case RANDOM:
              case SIN:
              case COS:
              case TAN:
              case SQRT:
              case FLOOR:
              case CEIL:
              case ROUND:
              case ABS:
              case INT:
              case LONG:
              case LOG:
              case LENGTH:
              case APPEND:
              case SUBSTRING:
              case INSERT:
              case REPLACE:
              case EXTRACT:
              case Str2Int:
              case Int2Str:
              case Compare:
              case gOpenWindow:
              case gOpenGWindow:
              case gCloseWindow:
              case gClearWindow:
              case gSaveWindow:
              case gSetOrigin:
              case gSetMap:
              case gSetDotShape:
              case gSetLineColor:
              case gSetFillColor:
              case gSetLineShape:
              case gSetLineWidth:
              case gSetArrowType:
              case gSetArrowDir:
              case gSetTextColor:
              case gSetFont:
              case gSetFontType:
              case gSetFontSize:
              case gDrawPoint:
              case gDrawLine:
              case gDrawText:
              case gDrawCircle:
              case gFillCircle:
              case gDrawOval:
              case gFillOval:
              case gDrawBox:
              case gFillBox:
              case gDrawArc:
              case gFillArc:
              case gDrawPolygon:
              case gFillPolygon:
              case gDrawPolyline:
              case gDrawImage:
              case gSetRepaintFlag:
              case gRepaint:
              case OPENR:
              case OPENW:
              case OPENA:
              case CLOSE:
              case GETSTR:
              case GETLINE:
              case PUTSTR:
              case PUTLINE:
              case FLUSH:
              case ISFILE:
              case RENAME:
              case REMOVE:
              case SLEEP:
              case LITERAL:
              case FLOAT_LITERAL:
              case IDENT:
              case STRLIT:{
                ;
                break;
                }
              default:
                jj_la1[6] = jj_gen;
                break label_3;
              }
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case VARINT:
              case VARLONG:
              case VARDOUBLE:
              case VARSTRING:
              case VARBOOLEAN:{
                VarDecl();
                break;
                }
              case SUBOP:
              case LP:
              case SM:
              case TRUE:
              case FALSE:
              case EOF_STR:
              case LF_STR:
              case CR_STR:
              case NL_STR:
              case HT_STR:
              case NULL_STR:
              case IF:
              case DOWHILE:
              case INFINITE:
              case CASEDEFAULT:
              case BREAK:
              case GET:
              case RANDOM:
              case SIN:
              case COS:
              case TAN:
              case SQRT:
              case FLOOR:
              case CEIL:
              case ROUND:
              case ABS:
              case INT:
              case LONG:
              case LOG:
              case LENGTH:
              case APPEND:
              case SUBSTRING:
              case INSERT:
              case REPLACE:
              case EXTRACT:
              case Str2Int:
              case Int2Str:
              case Compare:
              case gOpenWindow:
              case gOpenGWindow:
              case gCloseWindow:
              case gClearWindow:
              case gSaveWindow:
              case gSetOrigin:
              case gSetMap:
              case gSetDotShape:
              case gSetLineColor:
              case gSetFillColor:
              case gSetLineShape:
              case gSetLineWidth:
              case gSetArrowType:
              case gSetArrowDir:
              case gSetTextColor:
              case gSetFont:
              case gSetFontType:
              case gSetFontSize:
              case gDrawPoint:
              case gDrawLine:
              case gDrawText:
              case gDrawCircle:
              case gFillCircle:
              case gDrawOval:
              case gFillOval:
              case gDrawBox:
              case gFillBox:
              case gDrawArc:
              case gFillArc:
              case gDrawPolygon:
              case gFillPolygon:
              case gDrawPolyline:
              case gDrawImage:
              case gSetRepaintFlag:
              case gRepaint:
              case OPENR:
              case OPENW:
              case OPENA:
              case CLOSE:
              case GETSTR:
              case GETLINE:
              case PUTSTR:
              case PUTLINE:
              case FLUSH:
              case ISFILE:
              case RENAME:
              case REMOVE:
              case SLEEP:
              case LITERAL:
              case FLOAT_LITERAL:
              case IDENT:
              case STRLIT:{
                Stat();
                break;
                }
              default:
                jj_la1[7] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          } catch (Throwable jjte002) {
if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte002;}
                  }
                  if (jjte002 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte002;}
                  }
                  {if (true) throw (Error)jjte002;}
          } finally {
if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                  }
          }
          jj_consume_token(ENDPROCEDURAL);
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
jjtn000.line_num2 = jj_consume_token(SM).beginLine;
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
jjtn000.varName = str2Half(t.image, t.beginLine);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Function");
    }
  }

  final public void FunctionVar() throws ParseException {
    trace_call("FunctionVar");
    try {/*@bgen(jjtree) FunctionVar */
  ASTFunctionVar jjtn000 = new ASTFunctionVar(JJTFUNCTIONVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VARINT:{
          jj_consume_token(VARINT);
jjtn000.decl = Declaration.INT;
          break;
          }
        case VARLONG:{
          jj_consume_token(VARLONG);
jjtn000.decl = Declaration.LONG;
          break;
          }
        case VARDOUBLE:{
          jj_consume_token(VARDOUBLE);
jjtn000.decl = Declaration.DOUBLE;
          break;
          }
        case VARSTRING:{
          jj_consume_token(VARSTRING);
jjtn000.decl = Declaration.STRING;
          break;
          }
        case VARBOOLEAN:{
          jj_consume_token(VARBOOLEAN);
jjtn000.decl = Declaration.BOOLEAN;
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        Decl();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CM:{
          jj_consume_token(CM);
          FunctionVar();
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("FunctionVar");
    }
  }

  final public void VarDecl() throws ParseException {
    trace_call("VarDecl");
    try {/*@bgen(jjtree) VarDecl */
  ASTVarDecl jjtn000 = new ASTVarDecl(JJTVARDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VARINT:{
          jj_consume_token(VARINT);
jjtn000.decl = Declaration.INT;
          break;
          }
        case VARLONG:{
          jj_consume_token(VARLONG);
jjtn000.decl = Declaration.LONG;
          break;
          }
        case VARDOUBLE:{
          jj_consume_token(VARDOUBLE);
jjtn000.decl = Declaration.DOUBLE;
          break;
          }
        case VARSTRING:{
          jj_consume_token(VARSTRING);
jjtn000.decl = Declaration.STRING;
          break;
          }
        case VARBOOLEAN:{
          jj_consume_token(VARBOOLEAN);
jjtn000.decl = Declaration.BOOLEAN;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        Decl();
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CM:{
            ;
            break;
            }
          default:
            jj_la1[12] = jj_gen;
            break label_4;
          }
          jj_consume_token(CM);
          Decl();
        }
jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("VarDecl");
    }
  }

  final public void Decl() throws ParseException {
    trace_call("Decl");
    try {/*@bgen(jjtree) Decl */
        ASTDecl jjtn000 = new ASTDecl(JJTDECL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(IDENT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LD:{
          jj_consume_token(LD);
          Array();
          jj_consume_token(RD);
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          ;
        }
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
jjtn000.varName = str2Half(t.image, t.beginLine);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Decl");
    }
  }

  final public void Array() throws ParseException {
    trace_call("Array");
    try {/*@bgen(jjtree) Array */
  ASTArray jjtn000 = new ASTArray(JJTARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        AddExpr();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CM:{
          jj_consume_token(CM);
          Array();
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Array");
    }
  }

  final public void Stat() throws ParseException {
    trace_call("Stat");
    try {
      if (jj_2_1(100)) {
        PutStat();
      } else if (jj_2_2(100)) {
        Return();
      } else if (jj_2_3(100)) {
        Label();
      } else if (jj_2_4(100)) {
        AssignStats();
      } else if (jj_2_5(100)) {
        FunctionCall();
      } else if (jj_2_6(100)) {
        InputStat();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SUBOP:
        case LP:
        case TRUE:
        case FALSE:
        case EOF_STR:
        case LF_STR:
        case CR_STR:
        case NL_STR:
        case HT_STR:
        case NULL_STR:
        case GET:
        case RANDOM:
        case SIN:
        case COS:
        case TAN:
        case SQRT:
        case FLOOR:
        case CEIL:
        case ROUND:
        case ABS:
        case INT:
        case LONG:
        case LOG:
        case LENGTH:
        case APPEND:
        case SUBSTRING:
        case INSERT:
        case REPLACE:
        case EXTRACT:
        case Str2Int:
        case Int2Str:
        case Compare:
        case OPENR:
        case OPENW:
        case OPENA:
        case GETSTR:
        case GETLINE:
        case ISFILE:
        case LITERAL:
        case FLOAT_LITERAL:
        case IDENT:
        case STRLIT:{
          WhileSwitchFor();
          break;
          }
        case INFINITE:{
          InfiniteLoop();
          break;
          }
        case IF:{
          IfStat();
          break;
          }
        case DOWHILE:{
          RepeatUntil();
          break;
          }
        case BREAK:{
          Break();
          break;
          }
        case gOpenWindow:{
          gOpenWindow();
          break;
          }
        case gOpenGWindow:{
          gOpenGraphWindow();
          break;
          }
        case gCloseWindow:{
          gCloseWindow();
          break;
          }
        case gClearWindow:{
          gClearWindow();
          break;
          }
        case gSaveWindow:{
          gSaveWindow();
          break;
          }
        case gSetOrigin:{
          gSetOrigin();
          break;
          }
        case gSetMap:{
          gSetMap();
          break;
          }
        case gSetFillColor:{
          gSetFillColor();
          break;
          }
        case gSetLineColor:{
          gSetLineColor();
          break;
          }
        case gSetTextColor:{
          gSetTextColor();
          break;
          }
        case gSetFont:{
          gSetFont();
          break;
          }
        case gSetFontType:{
          gSetFontType();
          break;
          }
        case gSetFontSize:{
          gSetFontSize();
          break;
          }
        case gSetDotShape:{
          gSetDotShape();
          break;
          }
        case gSetArrowDir:{
          gSetArrowDir();
          break;
          }
        case gSetArrowType:{
          gSetArrowType();
          break;
          }
        case gSetLineShape:{
          gSetLineShape();
          break;
          }
        case gSetLineWidth:{
          gSetLineWidth();
          break;
          }
        case gDrawPoint:{
          gDrawPoint();
          break;
          }
        case gDrawLine:{
          gDrawLine();
          break;
          }
        case gDrawText:{
          gDrawText();
          break;
          }
        case gDrawCircle:{
          gDrawCircle();
          break;
          }
        case gFillCircle:{
          gFillCircle();
          break;
          }
        case gDrawOval:{
          gDrawOval();
          break;
          }
        case gFillOval:{
          gFillOval();
          break;
          }
        case gDrawBox:{
          gDrawBox();
          break;
          }
        case gFillBox:{
          gFillBox();
          break;
          }
        case gDrawArc:{
          gDrawArc();
          break;
          }
        case gFillArc:{
          gFillArc();
          break;
          }
        case gDrawPolygon:{
          gDrawPolygon();
          break;
          }
        case gFillPolygon:{
          gFillPolygon();
          break;
          }
        case gDrawPolyline:{
          gDrawPolyline();
          break;
          }
        case gDrawImage:{
          gDrawImage();
          break;
          }
        case gSetRepaintFlag:{
          gSetRepaintFlag();
          break;
          }
        case gRepaint:{
          gRepaint();
          break;
          }
        case CLOSE:{
          File_close();
          break;
          }
        case PUTSTR:{
          File_putstr();
          break;
          }
        case PUTLINE:{
          File_putline();
          break;
          }
        case FLUSH:{
          File_flush();
          break;
          }
        case RENAME:{
          File_rename();
          break;
          }
        case REMOVE:{
          File_remove();
          break;
          }
        case SLEEP:{
          Sleep();
          break;
          }
        case SM:{
          jj_consume_token(SM);
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("Stat");
    }
  }

  final public void AssignStats() throws ParseException {
    trace_call("AssignStats");
    try {/*@bgen(jjtree) AssignStats */
  ASTAssignStats jjtn000 = new ASTAssignStats(JJTASSIGNSTATS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        AssignStat();
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CM:{
            ;
            break;
            }
          default:
            jj_la1[16] = jj_gen;
            break label_5;
          }
          jj_consume_token(CM);
          AssignStat();
        }
jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("AssignStats");
    }
  }

  final public void AssignStat() throws ParseException {
    trace_call("AssignStat");
    try {/*@bgen(jjtree) AssignStat */
  ASTAssignStat jjtn000 = new ASTAssignStat(JJTASSIGNSTAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        Ident();
        jj_consume_token(ASGNOP);
        AddExpr();
      } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
      }
    } finally {
      trace_return("AssignStat");
    }
  }

  final public void InputStat() throws ParseException {
    trace_call("InputStat");
    try {/*@bgen(jjtree) AssignStat */
  ASTAssignStat jjtn000 = new ASTAssignStat(JJTASSIGNSTAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        Ident();
        jj_consume_token(INPUT);
jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
jjtn000.InputFlag = true;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("InputStat");
    }
  }

  final public void IfStat() throws ParseException {
    trace_call("IfStat");
    try {/*@bgen(jjtree) IfStat */
  ASTIfStat jjtn000 = new ASTIfStat(JJTIFSTAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(IF);
        Cond();
jjtn000.line_num1 = jj_consume_token(THEN).beginLine;
ASTBlock jjtn001 = new ASTBlock(JJTBLOCK);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
        try {
          label_6:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case SUBOP:
            case LP:
            case SM:
            case TRUE:
            case FALSE:
            case EOF_STR:
            case LF_STR:
            case CR_STR:
            case NL_STR:
            case HT_STR:
            case NULL_STR:
            case IF:
            case DOWHILE:
            case INFINITE:
            case CASEDEFAULT:
            case BREAK:
            case GET:
            case RANDOM:
            case SIN:
            case COS:
            case TAN:
            case SQRT:
            case FLOOR:
            case CEIL:
            case ROUND:
            case ABS:
            case INT:
            case LONG:
            case LOG:
            case LENGTH:
            case APPEND:
            case SUBSTRING:
            case INSERT:
            case REPLACE:
            case EXTRACT:
            case Str2Int:
            case Int2Str:
            case Compare:
            case gOpenWindow:
            case gOpenGWindow:
            case gCloseWindow:
            case gClearWindow:
            case gSaveWindow:
            case gSetOrigin:
            case gSetMap:
            case gSetDotShape:
            case gSetLineColor:
            case gSetFillColor:
            case gSetLineShape:
            case gSetLineWidth:
            case gSetArrowType:
            case gSetArrowDir:
            case gSetTextColor:
            case gSetFont:
            case gSetFontType:
            case gSetFontSize:
            case gDrawPoint:
            case gDrawLine:
            case gDrawText:
            case gDrawCircle:
            case gFillCircle:
            case gDrawOval:
            case gFillOval:
            case gDrawBox:
            case gFillBox:
            case gDrawArc:
            case gFillArc:
            case gDrawPolygon:
            case gFillPolygon:
            case gDrawPolyline:
            case gDrawImage:
            case gSetRepaintFlag:
            case gRepaint:
            case OPENR:
            case OPENW:
            case OPENA:
            case CLOSE:
            case GETSTR:
            case GETLINE:
            case PUTSTR:
            case PUTLINE:
            case FLUSH:
            case ISFILE:
            case RENAME:
            case REMOVE:
            case SLEEP:
            case LITERAL:
            case FLOAT_LITERAL:
            case IDENT:
            case STRLIT:{
              ;
              break;
              }
            default:
              jj_la1[17] = jj_gen;
              break label_6;
            }
            Stat();
          }
        } catch (Throwable jjte001) {
if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ELSE:
        case ELSEIF:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ELSE:{
            jj_consume_token(ELSE);
jjtn000.line_num2 = jj_consume_token(SM).beginLine;
ASTBlock jjtn002 = new ASTBlock(JJTBLOCK);
                                                                                                 boolean jjtc002 = true;
                                                                                                 jjtree.openNodeScope(jjtn002);
            try {
              label_7:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case SUBOP:
                case LP:
                case SM:
                case TRUE:
                case FALSE:
                case EOF_STR:
                case LF_STR:
                case CR_STR:
                case NL_STR:
                case HT_STR:
                case NULL_STR:
                case IF:
                case DOWHILE:
                case INFINITE:
                case CASEDEFAULT:
                case BREAK:
                case GET:
                case RANDOM:
                case SIN:
                case COS:
                case TAN:
                case SQRT:
                case FLOOR:
                case CEIL:
                case ROUND:
                case ABS:
                case INT:
                case LONG:
                case LOG:
                case LENGTH:
                case APPEND:
                case SUBSTRING:
                case INSERT:
                case REPLACE:
                case EXTRACT:
                case Str2Int:
                case Int2Str:
                case Compare:
                case gOpenWindow:
                case gOpenGWindow:
                case gCloseWindow:
                case gClearWindow:
                case gSaveWindow:
                case gSetOrigin:
                case gSetMap:
                case gSetDotShape:
                case gSetLineColor:
                case gSetFillColor:
                case gSetLineShape:
                case gSetLineWidth:
                case gSetArrowType:
                case gSetArrowDir:
                case gSetTextColor:
                case gSetFont:
                case gSetFontType:
                case gSetFontSize:
                case gDrawPoint:
                case gDrawLine:
                case gDrawText:
                case gDrawCircle:
                case gFillCircle:
                case gDrawOval:
                case gFillOval:
                case gDrawBox:
                case gFillBox:
                case gDrawArc:
                case gFillArc:
                case gDrawPolygon:
                case gFillPolygon:
                case gDrawPolyline:
                case gDrawImage:
                case gSetRepaintFlag:
                case gRepaint:
                case OPENR:
                case OPENW:
                case OPENA:
                case CLOSE:
                case GETSTR:
                case GETLINE:
                case PUTSTR:
                case PUTLINE:
                case FLUSH:
                case ISFILE:
                case RENAME:
                case REMOVE:
                case SLEEP:
                case LITERAL:
                case FLOAT_LITERAL:
                case IDENT:
                case STRLIT:{
                  ;
                  break;
                  }
                default:
                  jj_la1[18] = jj_gen;
                  break label_7;
                }
                Stat();
              }
            } catch (Throwable jjte002) {
if (jjtc002) {
                                                                                                   jjtree.clearNodeScope(jjtn002);
                                                                                                   jjtc002 = false;
                                                                                                 } else {
                                                                                                   jjtree.popNode();
                                                                                                 }
                                                                                                 if (jjte002 instanceof RuntimeException) {
                                                                                                   {if (true) throw (RuntimeException)jjte002;}
                                                                                                 }
                                                                                                 if (jjte002 instanceof ParseException) {
                                                                                                   {if (true) throw (ParseException)jjte002;}
                                                                                                 }
                                                                                                 {if (true) throw (Error)jjte002;}
            } finally {
if (jjtc002) {
                                                                                                   jjtree.closeNodeScope(jjtn002, true);
                                                                                                 }
            }
            break;
            }
          case ELSEIF:{
            ElseIfStat();
            break;
            }
          default:
            jj_la1[19] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          ;
        }
        jj_consume_token(ENDIF);
jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
jjtn000.line_num3 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("IfStat");
    }
  }

  final public void ElseIfStat() throws ParseException {
    trace_call("ElseIfStat");
    try {/*@bgen(jjtree) IfStat */
  ASTIfStat jjtn000 = new ASTIfStat(JJTIFSTAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(ELSEIF);
        jj_consume_token(IF);
        Cond();
jjtn000.line_num1 = jj_consume_token(THEN).beginLine;
        jj_consume_token(SM);
ASTBlock jjtn001 = new ASTBlock(JJTBLOCK);
                                                                                              boolean jjtc001 = true;
                                                                                              jjtree.openNodeScope(jjtn001);
        try {
          label_8:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case SUBOP:
            case LP:
            case SM:
            case TRUE:
            case FALSE:
            case EOF_STR:
            case LF_STR:
            case CR_STR:
            case NL_STR:
            case HT_STR:
            case NULL_STR:
            case IF:
            case DOWHILE:
            case INFINITE:
            case CASEDEFAULT:
            case BREAK:
            case GET:
            case RANDOM:
            case SIN:
            case COS:
            case TAN:
            case SQRT:
            case FLOOR:
            case CEIL:
            case ROUND:
            case ABS:
            case INT:
            case LONG:
            case LOG:
            case LENGTH:
            case APPEND:
            case SUBSTRING:
            case INSERT:
            case REPLACE:
            case EXTRACT:
            case Str2Int:
            case Int2Str:
            case Compare:
            case gOpenWindow:
            case gOpenGWindow:
            case gCloseWindow:
            case gClearWindow:
            case gSaveWindow:
            case gSetOrigin:
            case gSetMap:
            case gSetDotShape:
            case gSetLineColor:
            case gSetFillColor:
            case gSetLineShape:
            case gSetLineWidth:
            case gSetArrowType:
            case gSetArrowDir:
            case gSetTextColor:
            case gSetFont:
            case gSetFontType:
            case gSetFontSize:
            case gDrawPoint:
            case gDrawLine:
            case gDrawText:
            case gDrawCircle:
            case gFillCircle:
            case gDrawOval:
            case gFillOval:
            case gDrawBox:
            case gFillBox:
            case gDrawArc:
            case gFillArc:
            case gDrawPolygon:
            case gFillPolygon:
            case gDrawPolyline:
            case gDrawImage:
            case gSetRepaintFlag:
            case gRepaint:
            case OPENR:
            case OPENW:
            case OPENA:
            case CLOSE:
            case GETSTR:
            case GETLINE:
            case PUTSTR:
            case PUTLINE:
            case FLUSH:
            case ISFILE:
            case RENAME:
            case REMOVE:
            case SLEEP:
            case LITERAL:
            case FLOAT_LITERAL:
            case IDENT:
            case STRLIT:{
              ;
              break;
              }
            default:
              jj_la1[21] = jj_gen;
              break label_8;
            }
            Stat();
          }
        } catch (Throwable jjte001) {
if (jjtc001) {
                                                                                                jjtree.clearNodeScope(jjtn001);
                                                                                                jjtc001 = false;
                                                                                              } else {
                                                                                                jjtree.popNode();
                                                                                              }
                                                                                              if (jjte001 instanceof RuntimeException) {
                                                                                                {if (true) throw (RuntimeException)jjte001;}
                                                                                              }
                                                                                              if (jjte001 instanceof ParseException) {
                                                                                                {if (true) throw (ParseException)jjte001;}
                                                                                              }
                                                                                              {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                                                                                                jjtree.closeNodeScope(jjtn001, true);
                                                                                              }
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ELSE:
        case ELSEIF:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ELSE:{
            jj_consume_token(ELSE);
jjtn000.line_num2 = jj_consume_token(SM).beginLine;
ASTBlock jjtn002 = new ASTBlock(JJTBLOCK);
                                                                                         boolean jjtc002 = true;
                                                                                         jjtree.openNodeScope(jjtn002);
            try {
              label_9:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case SUBOP:
                case LP:
                case SM:
                case TRUE:
                case FALSE:
                case EOF_STR:
                case LF_STR:
                case CR_STR:
                case NL_STR:
                case HT_STR:
                case NULL_STR:
                case IF:
                case DOWHILE:
                case INFINITE:
                case CASEDEFAULT:
                case BREAK:
                case GET:
                case RANDOM:
                case SIN:
                case COS:
                case TAN:
                case SQRT:
                case FLOOR:
                case CEIL:
                case ROUND:
                case ABS:
                case INT:
                case LONG:
                case LOG:
                case LENGTH:
                case APPEND:
                case SUBSTRING:
                case INSERT:
                case REPLACE:
                case EXTRACT:
                case Str2Int:
                case Int2Str:
                case Compare:
                case gOpenWindow:
                case gOpenGWindow:
                case gCloseWindow:
                case gClearWindow:
                case gSaveWindow:
                case gSetOrigin:
                case gSetMap:
                case gSetDotShape:
                case gSetLineColor:
                case gSetFillColor:
                case gSetLineShape:
                case gSetLineWidth:
                case gSetArrowType:
                case gSetArrowDir:
                case gSetTextColor:
                case gSetFont:
                case gSetFontType:
                case gSetFontSize:
                case gDrawPoint:
                case gDrawLine:
                case gDrawText:
                case gDrawCircle:
                case gFillCircle:
                case gDrawOval:
                case gFillOval:
                case gDrawBox:
                case gFillBox:
                case gDrawArc:
                case gFillArc:
                case gDrawPolygon:
                case gFillPolygon:
                case gDrawPolyline:
                case gDrawImage:
                case gSetRepaintFlag:
                case gRepaint:
                case OPENR:
                case OPENW:
                case OPENA:
                case CLOSE:
                case GETSTR:
                case GETLINE:
                case PUTSTR:
                case PUTLINE:
                case FLUSH:
                case ISFILE:
                case RENAME:
                case REMOVE:
                case SLEEP:
                case LITERAL:
                case FLOAT_LITERAL:
                case IDENT:
                case STRLIT:{
                  ;
                  break;
                  }
                default:
                  jj_la1[22] = jj_gen;
                  break label_9;
                }
                Stat();
              }
            } catch (Throwable jjte002) {
if (jjtc002) {
                                                                                           jjtree.clearNodeScope(jjtn002);
                                                                                           jjtc002 = false;
                                                                                         } else {
                                                                                           jjtree.popNode();
                                                                                         }
                                                                                         if (jjte002 instanceof RuntimeException) {
                                                                                           {if (true) throw (RuntimeException)jjte002;}
                                                                                         }
                                                                                         if (jjte002 instanceof ParseException) {
                                                                                           {if (true) throw (ParseException)jjte002;}
                                                                                         }
                                                                                         {if (true) throw (Error)jjte002;}
            } finally {
if (jjtc002) {
                                                                                           jjtree.closeNodeScope(jjtn002, true);
                                                                                         }
            }
            break;
            }
          case ELSEIF:{
            ElseIfStat();
            break;
            }
          default:
            jj_la1[23] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("ElseIfStat");
    }
  }

  final public void RepeatUntil() throws ParseException {
    trace_call("RepeatUntil");
    try {/*@bgen(jjtree) RepeatUntil */
  ASTRepeatUntil jjtn000 = new ASTRepeatUntil(JJTREPEATUNTIL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(DOWHILE);
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
ASTBlock jjtn001 = new ASTBlock(JJTBLOCK);
                                                                            boolean jjtc001 = true;
                                                                            jjtree.openNodeScope(jjtn001);
        try {
          label_10:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case SUBOP:
            case LP:
            case SM:
            case TRUE:
            case FALSE:
            case EOF_STR:
            case LF_STR:
            case CR_STR:
            case NL_STR:
            case HT_STR:
            case NULL_STR:
            case IF:
            case DOWHILE:
            case INFINITE:
            case CASEDEFAULT:
            case BREAK:
            case GET:
            case RANDOM:
            case SIN:
            case COS:
            case TAN:
            case SQRT:
            case FLOOR:
            case CEIL:
            case ROUND:
            case ABS:
            case INT:
            case LONG:
            case LOG:
            case LENGTH:
            case APPEND:
            case SUBSTRING:
            case INSERT:
            case REPLACE:
            case EXTRACT:
            case Str2Int:
            case Int2Str:
            case Compare:
            case gOpenWindow:
            case gOpenGWindow:
            case gCloseWindow:
            case gClearWindow:
            case gSaveWindow:
            case gSetOrigin:
            case gSetMap:
            case gSetDotShape:
            case gSetLineColor:
            case gSetFillColor:
            case gSetLineShape:
            case gSetLineWidth:
            case gSetArrowType:
            case gSetArrowDir:
            case gSetTextColor:
            case gSetFont:
            case gSetFontType:
            case gSetFontSize:
            case gDrawPoint:
            case gDrawLine:
            case gDrawText:
            case gDrawCircle:
            case gFillCircle:
            case gDrawOval:
            case gFillOval:
            case gDrawBox:
            case gFillBox:
            case gDrawArc:
            case gFillArc:
            case gDrawPolygon:
            case gFillPolygon:
            case gDrawPolyline:
            case gDrawImage:
            case gSetRepaintFlag:
            case gRepaint:
            case OPENR:
            case OPENW:
            case OPENA:
            case CLOSE:
            case GETSTR:
            case GETLINE:
            case PUTSTR:
            case PUTLINE:
            case FLUSH:
            case ISFILE:
            case RENAME:
            case REMOVE:
            case SLEEP:
            case LITERAL:
            case FLOAT_LITERAL:
            case IDENT:
            case STRLIT:{
              ;
              break;
              }
            default:
              jj_la1[25] = jj_gen;
              break label_10;
            }
            Stat();
          }
        } catch (Throwable jjte001) {
if (jjtc001) {
                                                                              jjtree.clearNodeScope(jjtn001);
                                                                              jjtc001 = false;
                                                                            } else {
                                                                              jjtree.popNode();
                                                                            }
                                                                            if (jjte001 instanceof RuntimeException) {
                                                                              {if (true) throw (RuntimeException)jjte001;}
                                                                            }
                                                                            if (jjte001 instanceof ParseException) {
                                                                              {if (true) throw (ParseException)jjte001;}
                                                                            }
                                                                            {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                                                                              jjtree.closeNodeScope(jjtn001, true);
                                                                            }
        }
        jj_consume_token(DOWHILE2);
        Cond();
        jj_consume_token(DOWHILE3);
jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
jjtn000.line_num2 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("RepeatUntil");
    }
  }

  final public void ForStatAdd() throws ParseException {
    trace_call("ForStatAdd");
    try {/*@bgen(jjtree) ForStatAdd */
  ASTForStatAdd jjtn000 = new ASTForStatAdd(JJTFORSTATADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        AddExpr();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FORADD:{
          jj_consume_token(FORADD);
jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
jjtn000.op = 1;
          break;
          }
        case FORSUB:{
          jj_consume_token(FORSUB);
jjtree.closeNodeScope(jjtn000, true);
                                                            jjtc000 = false;
jjtn000.op = -1;
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("ForStatAdd");
    }
  }

  final public void WhileSwitchFor() throws ParseException {
    trace_call("WhileSwitchFor");
    try {/*@bgen(jjtree) WhileSwitchFor */
  ASTWhileSwitchFor jjtn000 = new ASTWhileSwitchFor(JJTWHILESWITCHFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        Cond();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case WHILE:{
          jj_consume_token(WHILE);
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
ASTBlock jjtn001 = new ASTBlock(JJTBLOCK);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
          try {
            label_11:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case SUBOP:
              case LP:
              case SM:
              case TRUE:
              case FALSE:
              case EOF_STR:
              case LF_STR:
              case CR_STR:
              case NL_STR:
              case HT_STR:
              case NULL_STR:
              case IF:
              case DOWHILE:
              case INFINITE:
              case CASEDEFAULT:
              case BREAK:
              case GET:
              case RANDOM:
              case SIN:
              case COS:
              case TAN:
              case SQRT:
              case FLOOR:
              case CEIL:
              case ROUND:
              case ABS:
              case INT:
              case LONG:
              case LOG:
              case LENGTH:
              case APPEND:
              case SUBSTRING:
              case INSERT:
              case REPLACE:
              case EXTRACT:
              case Str2Int:
              case Int2Str:
              case Compare:
              case gOpenWindow:
              case gOpenGWindow:
              case gCloseWindow:
              case gClearWindow:
              case gSaveWindow:
              case gSetOrigin:
              case gSetMap:
              case gSetDotShape:
              case gSetLineColor:
              case gSetFillColor:
              case gSetLineShape:
              case gSetLineWidth:
              case gSetArrowType:
              case gSetArrowDir:
              case gSetTextColor:
              case gSetFont:
              case gSetFontType:
              case gSetFontSize:
              case gDrawPoint:
              case gDrawLine:
              case gDrawText:
              case gDrawCircle:
              case gFillCircle:
              case gDrawOval:
              case gFillOval:
              case gDrawBox:
              case gFillBox:
              case gDrawArc:
              case gFillArc:
              case gDrawPolygon:
              case gFillPolygon:
              case gDrawPolyline:
              case gDrawImage:
              case gSetRepaintFlag:
              case gRepaint:
              case OPENR:
              case OPENW:
              case OPENA:
              case CLOSE:
              case GETSTR:
              case GETLINE:
              case PUTSTR:
              case PUTLINE:
              case FLUSH:
              case ISFILE:
              case RENAME:
              case REMOVE:
              case SLEEP:
              case LITERAL:
              case FLOAT_LITERAL:
              case IDENT:
              case STRLIT:{
                ;
                break;
                }
              default:
                jj_la1[27] = jj_gen;
                break label_11;
              }
              Stat();
            }
          } catch (Throwable jjte001) {
if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
          } finally {
if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
          }
          jj_consume_token(ENDLOOP);
jjtn000.line_num2 = jj_consume_token(SM).beginLine;
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
jjtn000.p = jjtn000.wh;
          break;
          }
        case SWITCH:{
          jj_consume_token(SWITCH);
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
ASTCase jjtn002 = new ASTCase(JJTCASE);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
          try {
            label_12:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case SUBOP:
              case LP:
              case SM:
              case TRUE:
              case FALSE:
              case EOF_STR:
              case LF_STR:
              case CR_STR:
              case NL_STR:
              case HT_STR:
              case NULL_STR:
              case IF:
              case DOWHILE:
              case INFINITE:
              case CASEDEFAULT:
              case BREAK:
              case GET:
              case RANDOM:
              case SIN:
              case COS:
              case TAN:
              case SQRT:
              case FLOOR:
              case CEIL:
              case ROUND:
              case ABS:
              case INT:
              case LONG:
              case LOG:
              case LENGTH:
              case APPEND:
              case SUBSTRING:
              case INSERT:
              case REPLACE:
              case EXTRACT:
              case Str2Int:
              case Int2Str:
              case Compare:
              case gOpenWindow:
              case gOpenGWindow:
              case gCloseWindow:
              case gClearWindow:
              case gSaveWindow:
              case gSetOrigin:
              case gSetMap:
              case gSetDotShape:
              case gSetLineColor:
              case gSetFillColor:
              case gSetLineShape:
              case gSetLineWidth:
              case gSetArrowType:
              case gSetArrowDir:
              case gSetTextColor:
              case gSetFont:
              case gSetFontType:
              case gSetFontSize:
              case gDrawPoint:
              case gDrawLine:
              case gDrawText:
              case gDrawCircle:
              case gFillCircle:
              case gDrawOval:
              case gFillOval:
              case gDrawBox:
              case gFillBox:
              case gDrawArc:
              case gFillArc:
              case gDrawPolygon:
              case gFillPolygon:
              case gDrawPolyline:
              case gDrawImage:
              case gSetRepaintFlag:
              case gRepaint:
              case OPENR:
              case OPENW:
              case OPENA:
              case CLOSE:
              case GETSTR:
              case GETLINE:
              case PUTSTR:
              case PUTLINE:
              case FLUSH:
              case ISFILE:
              case RENAME:
              case REMOVE:
              case SLEEP:
              case LITERAL:
              case FLOAT_LITERAL:
              case IDENT:
              case STRLIT:{
                ;
                break;
                }
              default:
                jj_la1[28] = jj_gen;
                break label_12;
              }
              Stat();
            }
          } catch (Throwable jjte002) {
if (jjtc002) {
                            jjtree.clearNodeScope(jjtn002);
                            jjtc002 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte002 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte002;}
                          }
                          if (jjte002 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte002;}
                          }
                          {if (true) throw (Error)jjte002;}
          } finally {
if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, true);
                          }
          }
          jj_consume_token(ENDSWITCH);
jjtn000.line_num2 = jj_consume_token(SM).beginLine;
jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
jjtn000.p = jjtn000.sw;
          break;
          }
        case FOR:{
          jj_consume_token(FOR);
          AddExpr();
          jj_consume_token(FOR2);
          AddExpr();
          jj_consume_token(FOR3);
          ForStatAdd();
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
ASTBlock jjtn003 = new ASTBlock(JJTBLOCK);
                          boolean jjtc003 = true;
                          jjtree.openNodeScope(jjtn003);
          try {
            label_13:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case SUBOP:
              case LP:
              case SM:
              case TRUE:
              case FALSE:
              case EOF_STR:
              case LF_STR:
              case CR_STR:
              case NL_STR:
              case HT_STR:
              case NULL_STR:
              case IF:
              case DOWHILE:
              case INFINITE:
              case CASEDEFAULT:
              case BREAK:
              case GET:
              case RANDOM:
              case SIN:
              case COS:
              case TAN:
              case SQRT:
              case FLOOR:
              case CEIL:
              case ROUND:
              case ABS:
              case INT:
              case LONG:
              case LOG:
              case LENGTH:
              case APPEND:
              case SUBSTRING:
              case INSERT:
              case REPLACE:
              case EXTRACT:
              case Str2Int:
              case Int2Str:
              case Compare:
              case gOpenWindow:
              case gOpenGWindow:
              case gCloseWindow:
              case gClearWindow:
              case gSaveWindow:
              case gSetOrigin:
              case gSetMap:
              case gSetDotShape:
              case gSetLineColor:
              case gSetFillColor:
              case gSetLineShape:
              case gSetLineWidth:
              case gSetArrowType:
              case gSetArrowDir:
              case gSetTextColor:
              case gSetFont:
              case gSetFontType:
              case gSetFontSize:
              case gDrawPoint:
              case gDrawLine:
              case gDrawText:
              case gDrawCircle:
              case gFillCircle:
              case gDrawOval:
              case gFillOval:
              case gDrawBox:
              case gFillBox:
              case gDrawArc:
              case gFillArc:
              case gDrawPolygon:
              case gFillPolygon:
              case gDrawPolyline:
              case gDrawImage:
              case gSetRepaintFlag:
              case gRepaint:
              case OPENR:
              case OPENW:
              case OPENA:
              case CLOSE:
              case GETSTR:
              case GETLINE:
              case PUTSTR:
              case PUTLINE:
              case FLUSH:
              case ISFILE:
              case RENAME:
              case REMOVE:
              case SLEEP:
              case LITERAL:
              case FLOAT_LITERAL:
              case IDENT:
              case STRLIT:{
                ;
                break;
                }
              default:
                jj_la1[29] = jj_gen;
                break label_13;
              }
              Stat();
            }
          } catch (Throwable jjte003) {
if (jjtc003) {
                            jjtree.clearNodeScope(jjtn003);
                            jjtc003 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte003 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte003;}
                          }
                          if (jjte003 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte003;}
                          }
                          {if (true) throw (Error)jjte003;}
          } finally {
if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003, true);
                          }
          }
          jj_consume_token(ENDLOOP);
jjtn000.line_num2 = jj_consume_token(SM).beginLine;
jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
jjtn000.p = jjtn000.fr;
          break;
          }
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("WhileSwitchFor");
    }
  }

  final public void InfiniteLoop() throws ParseException {
    trace_call("InfiniteLoop");
    try {/*@bgen(jjtree) InfiniteLoop */
  ASTInfiniteLoop jjtn000 = new ASTInfiniteLoop(JJTINFINITELOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(INFINITE);
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
ASTBlock jjtn001 = new ASTBlock(JJTBLOCK);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          label_14:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case SUBOP:
            case LP:
            case SM:
            case TRUE:
            case FALSE:
            case EOF_STR:
            case LF_STR:
            case CR_STR:
            case NL_STR:
            case HT_STR:
            case NULL_STR:
            case IF:
            case DOWHILE:
            case INFINITE:
            case CASEDEFAULT:
            case BREAK:
            case GET:
            case RANDOM:
            case SIN:
            case COS:
            case TAN:
            case SQRT:
            case FLOOR:
            case CEIL:
            case ROUND:
            case ABS:
            case INT:
            case LONG:
            case LOG:
            case LENGTH:
            case APPEND:
            case SUBSTRING:
            case INSERT:
            case REPLACE:
            case EXTRACT:
            case Str2Int:
            case Int2Str:
            case Compare:
            case gOpenWindow:
            case gOpenGWindow:
            case gCloseWindow:
            case gClearWindow:
            case gSaveWindow:
            case gSetOrigin:
            case gSetMap:
            case gSetDotShape:
            case gSetLineColor:
            case gSetFillColor:
            case gSetLineShape:
            case gSetLineWidth:
            case gSetArrowType:
            case gSetArrowDir:
            case gSetTextColor:
            case gSetFont:
            case gSetFontType:
            case gSetFontSize:
            case gDrawPoint:
            case gDrawLine:
            case gDrawText:
            case gDrawCircle:
            case gFillCircle:
            case gDrawOval:
            case gFillOval:
            case gDrawBox:
            case gFillBox:
            case gDrawArc:
            case gFillArc:
            case gDrawPolygon:
            case gFillPolygon:
            case gDrawPolyline:
            case gDrawImage:
            case gSetRepaintFlag:
            case gRepaint:
            case OPENR:
            case OPENW:
            case OPENA:
            case CLOSE:
            case GETSTR:
            case GETLINE:
            case PUTSTR:
            case PUTLINE:
            case FLUSH:
            case ISFILE:
            case RENAME:
            case REMOVE:
            case SLEEP:
            case LITERAL:
            case FLOAT_LITERAL:
            case IDENT:
            case STRLIT:{
              ;
              break;
              }
            default:
              jj_la1[31] = jj_gen;
              break label_14;
            }
            Stat();
          }
        } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
        jj_consume_token(ENDLOOP);
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
jjtn000.line_num2 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("InfiniteLoop");
    }
  }

  final public void Label() throws ParseException {
    trace_call("Label");
    try {/*@bgen(jjtree) Label */
  ASTLabel jjtn000 = new ASTLabel(JJTLABEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SUBOP:
        case LP:
        case TRUE:
        case FALSE:
        case EOF_STR:
        case LF_STR:
        case CR_STR:
        case NL_STR:
        case HT_STR:
        case NULL_STR:
        case GET:
        case RANDOM:
        case SIN:
        case COS:
        case TAN:
        case SQRT:
        case FLOOR:
        case CEIL:
        case ROUND:
        case ABS:
        case INT:
        case LONG:
        case LOG:
        case LENGTH:
        case APPEND:
        case SUBSTRING:
        case INSERT:
        case REPLACE:
        case EXTRACT:
        case Str2Int:
        case Int2Str:
        case Compare:
        case OPENR:
        case OPENW:
        case OPENA:
        case GETSTR:
        case GETLINE:
        case ISFILE:
        case LITERAL:
        case FLOAT_LITERAL:
        case IDENT:
        case STRLIT:{
          AddExpr();
          jj_consume_token(CASE);
jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
          break;
          }
        case CASEDEFAULT:{
          jj_consume_token(CASEDEFAULT);
jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
          break;
          }
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Label");
    }
  }

  final public void GetStat() throws ParseException {
    trace_call("GetStat");
    try {/*@bgen(jjtree) GetStat */
  ASTGetStat jjtn000 = new ASTGetStat(JJTGETSTAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(GET);
        jj_consume_token(LP);
        Ident();
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("GetStat");
    }
  }

  final public void PutStat() throws ParseException {
    trace_call("PutStat");
    try {/*@bgen(jjtree) PutStat */
  ASTPutStat jjtn000 = new ASTPutStat(JJTPUTSTAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        PutParam();
        label_15:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CM2:{
            ;
            break;
            }
          default:
            jj_la1[33] = jj_gen;
            break label_15;
          }
          jj_consume_token(CM2);
          PutParam();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PUT:{
          jj_consume_token(PUT);
          break;
          }
        case PUTLN:{
          jj_consume_token(PUTLN);
jjtn000.n = "\n";
          break;
          }
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("PutStat");
    }
  }

  final public void PutParam() throws ParseException {
    trace_call("PutParam");
    try {
      AddExpr();
    } finally {
      trace_return("PutParam");
    }
  }

  final public void Block() throws ParseException {
    trace_call("Block");
    try {/*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(LC);
        label_16:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case SUBOP:
          case LP:
          case SM:
          case TRUE:
          case FALSE:
          case EOF_STR:
          case LF_STR:
          case CR_STR:
          case NL_STR:
          case HT_STR:
          case NULL_STR:
          case IF:
          case DOWHILE:
          case INFINITE:
          case CASEDEFAULT:
          case BREAK:
          case GET:
          case RANDOM:
          case SIN:
          case COS:
          case TAN:
          case SQRT:
          case FLOOR:
          case CEIL:
          case ROUND:
          case ABS:
          case INT:
          case LONG:
          case LOG:
          case LENGTH:
          case APPEND:
          case SUBSTRING:
          case INSERT:
          case REPLACE:
          case EXTRACT:
          case Str2Int:
          case Int2Str:
          case Compare:
          case gOpenWindow:
          case gOpenGWindow:
          case gCloseWindow:
          case gClearWindow:
          case gSaveWindow:
          case gSetOrigin:
          case gSetMap:
          case gSetDotShape:
          case gSetLineColor:
          case gSetFillColor:
          case gSetLineShape:
          case gSetLineWidth:
          case gSetArrowType:
          case gSetArrowDir:
          case gSetTextColor:
          case gSetFont:
          case gSetFontType:
          case gSetFontSize:
          case gDrawPoint:
          case gDrawLine:
          case gDrawText:
          case gDrawCircle:
          case gFillCircle:
          case gDrawOval:
          case gFillOval:
          case gDrawBox:
          case gFillBox:
          case gDrawArc:
          case gFillArc:
          case gDrawPolygon:
          case gFillPolygon:
          case gDrawPolyline:
          case gDrawImage:
          case gSetRepaintFlag:
          case gRepaint:
          case OPENR:
          case OPENW:
          case OPENA:
          case CLOSE:
          case GETSTR:
          case GETLINE:
          case PUTSTR:
          case PUTLINE:
          case FLUSH:
          case ISFILE:
          case RENAME:
          case REMOVE:
          case SLEEP:
          case LITERAL:
          case FLOAT_LITERAL:
          case IDENT:
          case STRLIT:{
            ;
            break;
            }
          default:
            jj_la1[35] = jj_gen;
            break label_16;
          }
          Stat();
        }
        jj_consume_token(RC);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Block");
    }
  }

  final public void Cond() throws ParseException {
    trace_call("Cond");
    try {
      ORExpr();
    } finally {
      trace_return("Cond");
    }
  }

  final public void ORExpr() throws ParseException {
    trace_call("ORExpr");
    try {
      AndExpr();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OROP:{
        jj_consume_token(OROP);
ASTORNode jjtn001 = new ASTORNode(JJTORNODE);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
        try {
          ORExpr();
        } catch (Throwable jjte001) {
if (jjtc001) {
                               jjtree.clearNodeScope(jjtn001);
                               jjtc001 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte001 instanceof RuntimeException) {
                               {if (true) throw (RuntimeException)jjte001;}
                             }
                             if (jjte001 instanceof ParseException) {
                               {if (true) throw (ParseException)jjte001;}
                             }
                             {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001,  2);
                             }
        }
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        ;
      }
    } finally {
      trace_return("ORExpr");
    }
  }

  final public void AndExpr() throws ParseException {
    trace_call("AndExpr");
    try {
      NotExpr();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ANDOP:{
        jj_consume_token(ANDOP);
ASTANDNode jjtn001 = new ASTANDNode(JJTANDNODE);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
        try {
          AndExpr();
        } catch (Throwable jjte001) {
if (jjtc001) {
                                jjtree.clearNodeScope(jjtn001);
                                jjtc001 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte001 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte001;}
                              }
                              if (jjte001 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte001;}
                              }
                              {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  2);
                              }
        }
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        ;
      }
    } finally {
      trace_return("AndExpr");
    }
  }

  final public void NotExpr() throws ParseException {
    trace_call("NotExpr");
    try {
      if (jj_2_7(100)) {
        CompareExpr();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NOTOP:{
ASTNOTNode jjtn001 = new ASTNOTNode(JJTNOTNODE);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
          try {
            jj_consume_token(NOTOP);
          } finally {
if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001,  1);
                                         }
          }
          break;
          }
        default:
          jj_la1[38] = jj_gen;
          ;
        }
      } else if (jj_2_8(100)) {
        jj_consume_token(LP);
        Cond();
        jj_consume_token(RP);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NOTOP:{
ASTNOTNode jjtn002 = new ASTNOTNode(JJTNOTNODE);
                                                    boolean jjtc002 = true;
                                                    jjtree.openNodeScope(jjtn002);
          try {
            jj_consume_token(NOTOP);
          } finally {
if (jjtc002) {
                                                      jjtree.closeNodeScope(jjtn002,  1);
                                                    }
          }
          break;
          }
        default:
          jj_la1[39] = jj_gen;
          ;
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("NotExpr");
    }
  }

  final public void CompareExpr() throws ParseException {
    trace_call("CompareExpr");
    try {
      AddExpr();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQOP:
      case GTOP:
      case GEOP:
      case LSOP:
      case LEOP:
      case NTOP:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQOP:{
          jj_consume_token(EQOP);
ASTEQNode jjtn001 = new ASTEQNode(JJTEQNODE);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
          try {
            AddExpr();
          } catch (Throwable jjte001) {
if (jjtc001) {
                           jjtree.clearNodeScope(jjtn001);
                           jjtc001 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte001 instanceof RuntimeException) {
                           {if (true) throw (RuntimeException)jjte001;}
                         }
                         if (jjte001 instanceof ParseException) {
                           {if (true) throw (ParseException)jjte001;}
                         }
                         {if (true) throw (Error)jjte001;}
          } finally {
if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001,  2);
                         }
          }
          break;
          }
        case NTOP:{
          jj_consume_token(NTOP);
ASTNTNode jjtn002 = new ASTNTNode(JJTNTNODE);
                                 boolean jjtc002 = true;
                                 jjtree.openNodeScope(jjtn002);
          try {
            AddExpr();
          } catch (Throwable jjte002) {
if (jjtc002) {
                                   jjtree.clearNodeScope(jjtn002);
                                   jjtc002 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte002 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte002;}
                                 }
                                 if (jjte002 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte002;}
                                 }
                                 {if (true) throw (Error)jjte002;}
          } finally {
if (jjtc002) {
                                   jjtree.closeNodeScope(jjtn002,  2);
                                 }
          }
          break;
          }
        case LSOP:{
          jj_consume_token(LSOP);
ASTLSNode jjtn003 = new ASTLSNode(JJTLSNODE);
                                 boolean jjtc003 = true;
                                 jjtree.openNodeScope(jjtn003);
          try {
            AddExpr();
          } catch (Throwable jjte003) {
if (jjtc003) {
                                   jjtree.clearNodeScope(jjtn003);
                                   jjtc003 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte003 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte003;}
                                 }
                                 if (jjte003 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte003;}
                                 }
                                 {if (true) throw (Error)jjte003;}
          } finally {
if (jjtc003) {
                                   jjtree.closeNodeScope(jjtn003,  2);
                                 }
          }
          break;
          }
        case GTOP:{
          jj_consume_token(GTOP);
ASTGTNode jjtn004 = new ASTGTNode(JJTGTNODE);
                                 boolean jjtc004 = true;
                                 jjtree.openNodeScope(jjtn004);
          try {
            AddExpr();
          } catch (Throwable jjte004) {
if (jjtc004) {
                                   jjtree.clearNodeScope(jjtn004);
                                   jjtc004 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte004 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte004;}
                                 }
                                 if (jjte004 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte004;}
                                 }
                                 {if (true) throw (Error)jjte004;}
          } finally {
if (jjtc004) {
                                   jjtree.closeNodeScope(jjtn004,  2);
                                 }
          }
          break;
          }
        case LEOP:{
          jj_consume_token(LEOP);
ASTLENode jjtn005 = new ASTLENode(JJTLENODE);
                                 boolean jjtc005 = true;
                                 jjtree.openNodeScope(jjtn005);
          try {
            AddExpr();
          } catch (Throwable jjte005) {
if (jjtc005) {
                                   jjtree.clearNodeScope(jjtn005);
                                   jjtc005 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte005 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte005;}
                                 }
                                 if (jjte005 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte005;}
                                 }
                                 {if (true) throw (Error)jjte005;}
          } finally {
if (jjtc005) {
                                   jjtree.closeNodeScope(jjtn005,  2);
                                 }
          }
          break;
          }
        case GEOP:{
          jj_consume_token(GEOP);
ASTGENode jjtn006 = new ASTGENode(JJTGENODE);
                                 boolean jjtc006 = true;
                                 jjtree.openNodeScope(jjtn006);
          try {
            AddExpr();
          } catch (Throwable jjte006) {
if (jjtc006) {
                                   jjtree.clearNodeScope(jjtn006);
                                   jjtc006 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte006 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte006;}
                                 }
                                 if (jjte006 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte006;}
                                 }
                                 {if (true) throw (Error)jjte006;}
          } finally {
if (jjtc006) {
                                   jjtree.closeNodeScope(jjtn006,  2);
                                 }
          }
          break;
          }
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        ;
      }
    } finally {
      trace_return("CompareExpr");
    }
  }

  final public void AddExpr() throws ParseException {
    trace_call("AddExpr");
    try {
      MulExpr();
      label_17:
      while (true) {
        if (jj_2_9(2)) {
          ;
        } else {
          break label_17;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ADDOP:{
          jj_consume_token(ADDOP);
ASTAddNode jjtn001 = new ASTAddNode(JJTADDNODE);
                                          boolean jjtc001 = true;
                                          jjtree.openNodeScope(jjtn001);
          try {
            MulExpr();
          } catch (Throwable jjte001) {
if (jjtc001) {
                                            jjtree.clearNodeScope(jjtn001);
                                            jjtc001 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte001 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte001;}
                                          }
                                          if (jjte001 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte001;}
                                          }
                                          {if (true) throw (Error)jjte001;}
          } finally {
if (jjtc001) {
                                            jjtree.closeNodeScope(jjtn001,  2);
                                          }
          }
          break;
          }
        case SUBOP:{
          jj_consume_token(SUBOP);
ASTSubNode jjtn002 = new ASTSubNode(JJTSUBNODE);
                                          boolean jjtc002 = true;
                                          jjtree.openNodeScope(jjtn002);
          try {
            MulExpr();
          } catch (Throwable jjte002) {
if (jjtc002) {
                                            jjtree.clearNodeScope(jjtn002);
                                            jjtc002 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte002 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte002;}
                                          }
                                          if (jjte002 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte002;}
                                          }
                                          {if (true) throw (Error)jjte002;}
          } finally {
if (jjtc002) {
                                            jjtree.closeNodeScope(jjtn002,  2);
                                          }
          }
          break;
          }
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("AddExpr");
    }
  }

  final public void MulExpr() throws ParseException {
    trace_call("MulExpr");
    try {
      UnExpr();
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULOP:
        case DIVOP:
        case DIVOP2:
        case SUROP:{
          ;
          break;
          }
        default:
          jj_la1[43] = jj_gen;
          break label_18;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULOP:{
          jj_consume_token(MULOP);
ASTMulNode jjtn001 = new ASTMulNode(JJTMULNODE);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
          try {
            UnExpr();
          } catch (Throwable jjte001) {
if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte001;}
                          }
                          if (jjte001 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte001;}
                          }
                          {if (true) throw (Error)jjte001;}
          } finally {
if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  2);
                          }
          }
          break;
          }
        case DIVOP:{
          jj_consume_token(DIVOP);
          UnExpr();
ASTDivNode jjtn002 = new ASTDivNode(JJTDIVNODE);
                                           boolean jjtc002 = true;
                                           jjtree.openNodeScope(jjtn002);
          try {
jjtree.closeNodeScope(jjtn002,  2);
                                           jjtc002 = false;
jjtn002.DivFlag=true;
          } finally {
if (jjtc002) {
                                             jjtree.closeNodeScope(jjtn002,  2);
                                           }
          }
          break;
          }
        case DIVOP2:{
          jj_consume_token(DIVOP2);
ASTDivNode jjtn003 = new ASTDivNode(JJTDIVNODE);
                                   boolean jjtc003 = true;
                                   jjtree.openNodeScope(jjtn003);
          try {
            UnExpr();
          } catch (Throwable jjte003) {
if (jjtc003) {
                                     jjtree.clearNodeScope(jjtn003);
                                     jjtc003 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte003 instanceof RuntimeException) {
                                     {if (true) throw (RuntimeException)jjte003;}
                                   }
                                   if (jjte003 instanceof ParseException) {
                                     {if (true) throw (ParseException)jjte003;}
                                   }
                                   {if (true) throw (Error)jjte003;}
          } finally {
if (jjtc003) {
                                     jjtree.closeNodeScope(jjtn003,  2);
                                   }
          }
          break;
          }
        case SUROP:{
          jj_consume_token(SUROP);
ASTSurNode jjtn004 = new ASTSurNode(JJTSURNODE);
                                  boolean jjtc004 = true;
                                  jjtree.openNodeScope(jjtn004);
          try {
            UnExpr();
          } catch (Throwable jjte004) {
if (jjtc004) {
                                    jjtree.clearNodeScope(jjtn004);
                                    jjtc004 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte004 instanceof RuntimeException) {
                                    {if (true) throw (RuntimeException)jjte004;}
                                  }
                                  if (jjte004 instanceof ParseException) {
                                    {if (true) throw (ParseException)jjte004;}
                                  }
                                  {if (true) throw (Error)jjte004;}
          } finally {
if (jjtc004) {
                                    jjtree.closeNodeScope(jjtn004,  2);
                                  }
          }
          break;
          }
        default:
          jj_la1[44] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("MulExpr");
    }
  }

  final public void UnExpr() throws ParseException {
    trace_call("UnExpr");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LP:
      case TRUE:
      case FALSE:
      case EOF_STR:
      case LF_STR:
      case CR_STR:
      case NL_STR:
      case HT_STR:
      case NULL_STR:
      case GET:
      case RANDOM:
      case SIN:
      case COS:
      case TAN:
      case SQRT:
      case FLOOR:
      case CEIL:
      case ROUND:
      case ABS:
      case INT:
      case LONG:
      case LOG:
      case LENGTH:
      case APPEND:
      case SUBSTRING:
      case INSERT:
      case REPLACE:
      case EXTRACT:
      case Str2Int:
      case Int2Str:
      case Compare:
      case OPENR:
      case OPENW:
      case OPENA:
      case GETSTR:
      case GETLINE:
      case ISFILE:
      case LITERAL:
      case FLOAT_LITERAL:
      case IDENT:
      case STRLIT:{
        PrimExpr();
        break;
        }
      case SUBOP:{
        jj_consume_token(SUBOP);
ASTMinNode jjtn001 = new ASTMinNode(JJTMINNODE);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
        try {
          PrimExpr();
        } catch (Throwable jjte001) {
if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte001;}
                          }
                          if (jjte001 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte001;}
                          }
                          {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  1);
                          }
        }
        break;
        }
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("UnExpr");
    }
  }

  final public void PrimExpr() throws ParseException {
    trace_call("PrimExpr");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LITERAL:{
        Literal();
        break;
        }
      case FLOAT_LITERAL:{
        FloatLiteral();
        break;
        }
      case TRUE:{
        True();
        break;
        }
      case FALSE:{
        False();
        break;
        }
      case STRLIT:{
        Strlit();
        break;
        }
      case EOF_STR:
      case LF_STR:
      case CR_STR:
      case NL_STR:
      case HT_STR:
      case NULL_STR:{
        EXTRA_STR();
        break;
        }
      case GET:
      case RANDOM:
      case SIN:
      case COS:
      case TAN:
      case SQRT:
      case FLOOR:
      case CEIL:
      case ROUND:
      case ABS:
      case INT:
      case LONG:
      case LOG:
      case LENGTH:
      case APPEND:
      case SUBSTRING:
      case INSERT:
      case REPLACE:
      case EXTRACT:
      case Str2Int:
      case Int2Str:
      case Compare:
      case OPENR:
      case OPENW:
      case OPENA:
      case GETSTR:
      case GETLINE:
      case ISFILE:{
        FunctionExpr();
        break;
        }
      case IDENT:{
        Ident();
        break;
        }
      case LP:{
        jj_consume_token(LP);
        AddExpr();
        jj_consume_token(RP);
        break;
        }
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("PrimExpr");
    }
  }

  final public void FunctionExpr() throws ParseException {
    trace_call("FunctionExpr");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GET:{
        Get();
        break;
        }
      case RANDOM:{
        Random();
        break;
        }
      case SIN:{
        Sine();
        break;
        }
      case COS:{
        Cosine();
        break;
        }
      case TAN:{
        Tangent();
        break;
        }
      case SQRT:{
        Sqrt();
        break;
        }
      case FLOOR:{
        Floor();
        break;
        }
      case CEIL:{
        Ceil();
        break;
        }
      case ROUND:{
        Round();
        break;
        }
      case ABS:{
        Abs();
        break;
        }
      case LOG:{
        Log();
        break;
        }
      case INT:{
        Int();
        break;
        }
      case LONG:{
        Long();
        break;
        }
      case LENGTH:{
        Length();
        break;
        }
      case APPEND:{
        Append();
        break;
        }
      case SUBSTRING:{
        Substring();
        break;
        }
      case INSERT:{
        Insert();
        break;
        }
      case REPLACE:{
        Replace();
        break;
        }
      case EXTRACT:{
        Extract();
        break;
        }
      case Str2Int:{
        Str2Int();
        break;
        }
      case Int2Str:{
        Int2Str();
        break;
        }
      case Compare:{
        Compare();
        break;
        }
      case OPENR:{
        File_openr();
        break;
        }
      case OPENW:{
        File_openw();
        break;
        }
      case OPENA:{
        File_opena();
        break;
        }
      case GETSTR:{
        File_getstr();
        break;
        }
      case GETLINE:{
        File_getline();
        break;
        }
      case ISFILE:{
        File_isfile();
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("FunctionExpr");
    }
  }

  final public void Get() throws ParseException {
    trace_call("Get");
    try {/*@bgen(jjtree) Get */
  ASTGet jjtn000 = new ASTGet(JJTGET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(GET);
        jj_consume_token(RP);
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Get");
    }
  }

  final public void Random() throws ParseException {
    trace_call("Random");
    try {/*@bgen(jjtree) Random */
  ASTRandom jjtn000 = new ASTRandom(JJTRANDOM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(RANDOM);
        AddExpr();
        jj_consume_token(RP);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Random");
    }
  }

  final public void Sine() throws ParseException {
    trace_call("Sine");
    try {/*@bgen(jjtree) Sine */
  ASTSine jjtn000 = new ASTSine(JJTSINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(SIN);
        AddExpr();
        jj_consume_token(RP);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Sine");
    }
  }

  final public void Cosine() throws ParseException {
    trace_call("Cosine");
    try {/*@bgen(jjtree) Cosine */
  ASTCosine jjtn000 = new ASTCosine(JJTCOSINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(COS);
        AddExpr();
        jj_consume_token(RP);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Cosine");
    }
  }

  final public void Tangent() throws ParseException {
    trace_call("Tangent");
    try {/*@bgen(jjtree) Tangent */
  ASTTangent jjtn000 = new ASTTangent(JJTTANGENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(TAN);
        AddExpr();
        jj_consume_token(RP);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Tangent");
    }
  }

  final public void Sqrt() throws ParseException {
    trace_call("Sqrt");
    try {/*@bgen(jjtree) Sqrt */
  ASTSqrt jjtn000 = new ASTSqrt(JJTSQRT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(SQRT);
        AddExpr();
        jj_consume_token(RP);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Sqrt");
    }
  }

  final public void Floor() throws ParseException {
    trace_call("Floor");
    try {/*@bgen(jjtree) Floor */
  ASTFloor jjtn000 = new ASTFloor(JJTFLOOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(FLOOR);
        AddExpr();
        jj_consume_token(RP);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Floor");
    }
  }

  final public void Ceil() throws ParseException {
    trace_call("Ceil");
    try {/*@bgen(jjtree) Ceil */
  ASTCeil jjtn000 = new ASTCeil(JJTCEIL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(CEIL);
        AddExpr();
        jj_consume_token(RP);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Ceil");
    }
  }

  final public void Round() throws ParseException {
    trace_call("Round");
    try {/*@bgen(jjtree) Round */
  ASTRound jjtn000 = new ASTRound(JJTROUND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(ROUND);
        AddExpr();
        jj_consume_token(RP);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Round");
    }
  }

  final public void Abs() throws ParseException {
    trace_call("Abs");
    try {/*@bgen(jjtree) Abs */
  ASTAbs jjtn000 = new ASTAbs(JJTABS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(ABS);
        AddExpr();
        jj_consume_token(RP);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Abs");
    }
  }

  final public void Log() throws ParseException {
    trace_call("Log");
    try {/*@bgen(jjtree) Log */
  ASTLog jjtn000 = new ASTLog(JJTLOG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(LOG);
        AddExpr();
        jj_consume_token(RP);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Log");
    }
  }

  final public void Int() throws ParseException {
    trace_call("Int");
    try {/*@bgen(jjtree) Int */
  ASTInt jjtn000 = new ASTInt(JJTINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(INT);
        AddExpr();
        jj_consume_token(RP);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Int");
    }
  }

  final public void Long() throws ParseException {
    trace_call("Long");
    try {/*@bgen(jjtree) Long */
  ASTLong jjtn000 = new ASTLong(JJTLONG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(LONG);
        AddExpr();
        jj_consume_token(RP);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Long");
    }
  }

  final public void Length() throws ParseException {
    trace_call("Length");
    try {/*@bgen(jjtree) Length */
  ASTLength jjtn000 = new ASTLength(JJTLENGTH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(LENGTH);
        AddExpr();
        jj_consume_token(RP);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Length");
    }
  }

  final public void Append() throws ParseException {
    trace_call("Append");
    try {/*@bgen(jjtree) Append */
  ASTAppend jjtn000 = new ASTAppend(JJTAPPEND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(APPEND);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(RP);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Append");
    }
  }

  final public void Substring() throws ParseException {
    trace_call("Substring");
    try {/*@bgen(jjtree) Substring */
  ASTSubstring jjtn000 = new ASTSubstring(JJTSUBSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(SUBSTRING);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CM:{
          jj_consume_token(CM);
          AddExpr();
          break;
          }
        default:
          jj_la1[48] = jj_gen;
          ;
        }
        jj_consume_token(RP);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Substring");
    }
  }

  final public void Insert() throws ParseException {
    trace_call("Insert");
    try {/*@bgen(jjtree) Insert */
  ASTInsert jjtn000 = new ASTInsert(JJTINSERT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(INSERT);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(RP);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Insert");
    }
  }

  final public void Replace() throws ParseException {
    trace_call("Replace");
    try {/*@bgen(jjtree) Replace */
  ASTReplace jjtn000 = new ASTReplace(JJTREPLACE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(REPLACE);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(RP);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Replace");
    }
  }

  final public void Extract() throws ParseException {
    trace_call("Extract");
    try {/*@bgen(jjtree) Extract */
  ASTExtract jjtn000 = new ASTExtract(JJTEXTRACT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(EXTRACT);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(RP);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Extract");
    }
  }

  final public void Str2Int() throws ParseException {
    trace_call("Str2Int");
    try {/*@bgen(jjtree) Str2Int */
  ASTStr2Int jjtn000 = new ASTStr2Int(JJTSTR2INT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(Str2Int);
        AddExpr();
        jj_consume_token(RP);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Str2Int");
    }
  }

  final public void Int2Str() throws ParseException {
    trace_call("Int2Str");
    try {/*@bgen(jjtree) Int2Str */
  ASTInt2Str jjtn000 = new ASTInt2Str(JJTINT2STR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(Int2Str);
        AddExpr();
        jj_consume_token(RP);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Int2Str");
    }
  }

  final public void Compare() throws ParseException {
    trace_call("Compare");
    try {/*@bgen(jjtree) Compare */
  ASTCompare jjtn000 = new ASTCompare(JJTCOMPARE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(Compare);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(RP);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Compare");
    }
  }

  final public void gOpenWindow() throws ParseException {
    trace_call("gOpenWindow");
    try {/*@bgen(jjtree) gOpenWindow */
  ASTgOpenWindow jjtn000 = new ASTgOpenWindow(JJTGOPENWINDOW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(gOpenWindow);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CM:{
          jj_consume_token(CM);
          AddExpr();
          jj_consume_token(CM);
          AddExpr();
          break;
          }
        default:
          jj_la1[49] = jj_gen;
          ;
        }
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                                                                        jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("gOpenWindow");
    }
  }

  final public void gOpenGraphWindow() throws ParseException {
    trace_call("gOpenGraphWindow");
    try {/*@bgen(jjtree) gOpenGraphWindow */
  ASTgOpenGraphWindow jjtn000 = new ASTgOpenGraphWindow(JJTGOPENGRAPHWINDOW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(gOpenGWindow);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CM:{
          jj_consume_token(CM);
          AddExpr();
          break;
          }
        default:
          jj_la1[50] = jj_gen;
          ;
        }
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                     jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("gOpenGraphWindow");
    }
  }

  final public void gCloseWindow() throws ParseException {
    trace_call("gCloseWindow");
    try {/*@bgen(jjtree) gCloseWindow */
  ASTgCloseWindow jjtn000 = new ASTgCloseWindow(JJTGCLOSEWINDOW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(gCloseWindow);
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("gCloseWindow");
    }
  }

  final public void gClearWindow() throws ParseException {
    trace_call("gClearWindow");
    try {/*@bgen(jjtree) gClearWindow */
  ASTgClearWindow jjtn000 = new ASTgClearWindow(JJTGCLEARWINDOW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(gClearWindow);
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("gClearWindow");
    }
  }

  final public void gSaveWindow() throws ParseException {
    trace_call("gSaveWindow");
    try {/*@bgen(jjtree) gSaveWindow */
  ASTgSaveWindow jjtn000 = new ASTgSaveWindow(JJTGSAVEWINDOW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(gSaveWindow);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                                      jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("gSaveWindow");
    }
  }

  final public void gSetOrigin() throws ParseException {
    trace_call("gSetOrigin");
    try {/*@bgen(jjtree) gSetOrigin */
  ASTgSetOrigin jjtn000 = new ASTgSetOrigin(JJTGSETORIGIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(gSetOrigin);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("gSetOrigin");
    }
  }

  final public void gSetMap() throws ParseException {
    trace_call("gSetMap");
    try {/*@bgen(jjtree) gSetMap */
  ASTgSetMap jjtn000 = new ASTgSetMap(JJTGSETMAP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(gSetMap);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                                                                jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("gSetMap");
    }
  }

  final public void gSetFillColor() throws ParseException {
    trace_call("gSetFillColor");
    try {/*@bgen(jjtree) gSetFillColor */
  ASTgSetFillColor jjtn000 = new ASTgSetFillColor(JJTGSETFILLCOLOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(gSetFillColor);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                                                       jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("gSetFillColor");
    }
  }

  final public void gSetLineColor() throws ParseException {
    trace_call("gSetLineColor");
    try {/*@bgen(jjtree) gSetLineColor */
  ASTgSetLineColor jjtn000 = new ASTgSetLineColor(JJTGSETLINECOLOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(gSetLineColor);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                                                       jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("gSetLineColor");
    }
  }

  final public void gSetTextColor() throws ParseException {
    trace_call("gSetTextColor");
    try {/*@bgen(jjtree) gSetTextColor */
  ASTgSetTextColor jjtn000 = new ASTgSetTextColor(JJTGSETTEXTCOLOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(gSetTextColor);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                                                       jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("gSetTextColor");
    }
  }

  final public void gSetFont() throws ParseException {
    trace_call("gSetFont");
    try {/*@bgen(jjtree) gSetFont */
  ASTgSetFont jjtn000 = new ASTgSetFont(JJTGSETFONT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(gSetFont);
        AddExpr();
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("gSetFont");
    }
  }

  final public void gSetFontType() throws ParseException {
    trace_call("gSetFontType");
    try {/*@bgen(jjtree) gSetFontType */
  ASTgSetFontType jjtn000 = new ASTgSetFontType(JJTGSETFONTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(gSetFontType);
        AddExpr();
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("gSetFontType");
    }
  }

  final public void gSetFontSize() throws ParseException {
    trace_call("gSetFontSize");
    try {/*@bgen(jjtree) gSetFontSize */
  ASTgSetFontSize jjtn000 = new ASTgSetFontSize(JJTGSETFONTSIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(gSetFontSize);
        AddExpr();
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("gSetFontSize");
    }
  }

  final public void gSetDotShape() throws ParseException {
    trace_call("gSetDotShape");
    try {/*@bgen(jjtree) gSetDotShape */
  ASTgSetDotShape jjtn000 = new ASTgSetDotShape(JJTGSETDOTSHAPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(gSetDotShape);
        AddExpr();
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("gSetDotShape");
    }
  }

  final public void gSetArrowDir() throws ParseException {
    trace_call("gSetArrowDir");
    try {/*@bgen(jjtree) gSetArrowDir */
  ASTgSetArrowDir jjtn000 = new ASTgSetArrowDir(JJTGSETARROWDIR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(gSetArrowDir);
        AddExpr();
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("gSetArrowDir");
    }
  }

  final public void gSetArrowType() throws ParseException {
    trace_call("gSetArrowType");
    try {/*@bgen(jjtree) gSetArrowType */
  ASTgSetArrowType jjtn000 = new ASTgSetArrowType(JJTGSETARROWTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(gSetArrowType);
        AddExpr();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CM:{
          jj_consume_token(CM);
          AddExpr();
          break;
          }
        default:
          jj_la1[51] = jj_gen;
          ;
        }
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                                            jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("gSetArrowType");
    }
  }

  final public void gSetLineShape() throws ParseException {
    trace_call("gSetLineShape");
    try {/*@bgen(jjtree) gSetLineShape */
  ASTgSetLineShape jjtn000 = new ASTgSetLineShape(JJTGSETLINESHAPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(gSetLineShape);
        AddExpr();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CM:{
          jj_consume_token(CM);
          AddExpr();
          break;
          }
        default:
          jj_la1[52] = jj_gen;
          ;
        }
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                                            jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("gSetLineShape");
    }
  }

  final public void gSetLineWidth() throws ParseException {
    trace_call("gSetLineWidth");
    try {/*@bgen(jjtree) gSetLineWidth */
  ASTgSetLineWidth jjtn000 = new ASTgSetLineWidth(JJTGSETLINEWIDTH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(gSetLineWidth);
        AddExpr();
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("gSetLineWidth");
    }
  }

  final public void gDrawPoint() throws ParseException {
    trace_call("gDrawPoint");
    try {/*@bgen(jjtree) gDrawPoint */
  ASTgDrawPoint jjtn000 = new ASTgDrawPoint(JJTGDRAWPOINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(gDrawPoint);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("gDrawPoint");
    }
  }

  final public void gDrawLine() throws ParseException {
    trace_call("gDrawLine");
    try {/*@bgen(jjtree) gDrawLine */
  ASTgDrawLine jjtn000 = new ASTgDrawLine(JJTGDRAWLINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(gDrawLine);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                                                                  jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("gDrawLine");
    }
  }

  final public void gDrawText() throws ParseException {
    trace_call("gDrawText");
    try {/*@bgen(jjtree) gDrawText */
  ASTgDrawText jjtn000 = new ASTgDrawText(JJTGDRAWTEXT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(gDrawText);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                                                   jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("gDrawText");
    }
  }

  final public void gDrawCircle() throws ParseException {
    trace_call("gDrawCircle");
    try {/*@bgen(jjtree) gDrawCircle */
  ASTgDrawCircle jjtn000 = new ASTgDrawCircle(JJTGDRAWCIRCLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(gDrawCircle);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                                                     jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("gDrawCircle");
    }
  }

  final public void gFillCircle() throws ParseException {
    trace_call("gFillCircle");
    try {/*@bgen(jjtree) gFillCircle */
  ASTgFillCircle jjtn000 = new ASTgFillCircle(JJTGFILLCIRCLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(gFillCircle);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                                                     jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("gFillCircle");
    }
  }

  final public void gDrawOval() throws ParseException {
    trace_call("gDrawOval");
    try {/*@bgen(jjtree) gDrawOval */
  ASTgDrawOval jjtn000 = new ASTgDrawOval(JJTGDRAWOVAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(gDrawOval);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                                                                  jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("gDrawOval");
    }
  }

  final public void gFillOval() throws ParseException {
    trace_call("gFillOval");
    try {/*@bgen(jjtree) gFillOval */
  ASTgFillOval jjtn000 = new ASTgFillOval(JJTGFILLOVAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(gFillOval);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                                                                  jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("gFillOval");
    }
  }

  final public void gDrawBox() throws ParseException {
    trace_call("gDrawBox");
    try {/*@bgen(jjtree) gDrawBox */
  ASTgDrawBox jjtn000 = new ASTgDrawBox(JJTGDRAWBOX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(gDrawBox);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                                                                 jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("gDrawBox");
    }
  }

  final public void gFillBox() throws ParseException {
    trace_call("gFillBox");
    try {/*@bgen(jjtree) gFillBox */
  ASTgFillBox jjtn000 = new ASTgFillBox(JJTGFILLBOX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(gFillBox);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                                                                 jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("gFillBox");
    }
  }

  final public void gDrawArc() throws ParseException {
    trace_call("gDrawArc");
    try {/*@bgen(jjtree) gDrawArc */
  ASTgDrawArc jjtn000 = new ASTgDrawArc(JJTGDRAWARC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(gDrawArc);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                                                                                                              jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("gDrawArc");
    }
  }

  final public void gFillArc() throws ParseException {
    trace_call("gFillArc");
    try {/*@bgen(jjtree) gFillArc */
  ASTgFillArc jjtn000 = new ASTgFillArc(JJTGFILLARC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(gFillArc);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                                                                                                              jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("gFillArc");
    }
  }

  final public void gDrawPolygon() throws ParseException {
    trace_call("gDrawPolygon");
    try {/*@bgen(jjtree) gDrawPolygon */
  ASTgDrawPolygon jjtn000 = new ASTgDrawPolygon(JJTGDRAWPOLYGON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(gDrawPolygon);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                                                      jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("gDrawPolygon");
    }
  }

  final public void gFillPolygon() throws ParseException {
    trace_call("gFillPolygon");
    try {/*@bgen(jjtree) gFillPolygon */
  ASTgFillPolygon jjtn000 = new ASTgFillPolygon(JJTGFILLPOLYGON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(gFillPolygon);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                                                      jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("gFillPolygon");
    }
  }

  final public void gDrawPolyline() throws ParseException {
    trace_call("gDrawPolyline");
    try {/*@bgen(jjtree) gDrawPolyline */
  ASTgDrawPolyline jjtn000 = new ASTgDrawPolyline(JJTGDRAWPOLYLINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(gDrawPolyline);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                                                       jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("gDrawPolyline");
    }
  }

  final public void gDrawImage() throws ParseException {
    trace_call("gDrawImage");
    try {/*@bgen(jjtree) gDrawImage */
  ASTgDrawImage jjtn000 = new ASTgDrawImage(JJTGDRAWIMAGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(gDrawImage);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CM:{
          jj_consume_token(CM);
          AddExpr();
          jj_consume_token(CM);
          AddExpr();
          break;
          }
        default:
          jj_la1[53] = jj_gen;
          ;
        }
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                                                                                      jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("gDrawImage");
    }
  }

  final public void gSetRepaintFlag() throws ParseException {
    trace_call("gSetRepaintFlag");
    try {/*@bgen(jjtree) gSetRepaintFlag */
  ASTgSetRepaintFlag jjtn000 = new ASTgSetRepaintFlag(JJTGSETREPAINTFLAG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(gSetRepaintFlag);
        AddExpr();
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("gSetRepaintFlag");
    }
  }

  final public void gRepaint() throws ParseException {
    trace_call("gRepaint");
    try {/*@bgen(jjtree) gRepaint */
  ASTgRepaint jjtn000 = new ASTgRepaint(JJTGREPAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(gRepaint);
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("gRepaint");
    }
  }

  final public void File_openr() throws ParseException {
    trace_call("File_openr");
    try {/*@bgen(jjtree) File_openr */
  ASTFile_openr jjtn000 = new ASTFile_openr(JJTFILE_OPENR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(OPENR);
        AddExpr();
        jj_consume_token(RP);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("File_openr");
    }
  }

  final public void File_openw() throws ParseException {
    trace_call("File_openw");
    try {/*@bgen(jjtree) File_openw */
  ASTFile_openw jjtn000 = new ASTFile_openw(JJTFILE_OPENW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(OPENW);
        AddExpr();
        jj_consume_token(RP);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("File_openw");
    }
  }

  final public void File_opena() throws ParseException {
    trace_call("File_opena");
    try {/*@bgen(jjtree) File_opena */
  ASTFile_opena jjtn000 = new ASTFile_opena(JJTFILE_OPENA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(OPENA);
        AddExpr();
        jj_consume_token(RP);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("File_opena");
    }
  }

  final public void File_close() throws ParseException {
    trace_call("File_close");
    try {/*@bgen(jjtree) File_close */
  ASTFile_close jjtn000 = new ASTFile_close(JJTFILE_CLOSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(CLOSE);
        AddExpr();
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("File_close");
    }
  }

  final public void File_getstr() throws ParseException {
    trace_call("File_getstr");
    try {/*@bgen(jjtree) File_getstr */
  ASTFile_getstr jjtn000 = new ASTFile_getstr(JJTFILE_GETSTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(GETSTR);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(RP);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("File_getstr");
    }
  }

  final public void File_getline() throws ParseException {
    trace_call("File_getline");
    try {/*@bgen(jjtree) File_getline */
  ASTFile_getline jjtn000 = new ASTFile_getline(JJTFILE_GETLINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(GETLINE);
        AddExpr();
        jj_consume_token(RP);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("File_getline");
    }
  }

  final public void File_putstr() throws ParseException {
    trace_call("File_putstr");
    try {/*@bgen(jjtree) File_putstr */
  ASTFile_putstr jjtn000 = new ASTFile_putstr(JJTFILE_PUTSTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(PUTSTR);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                                 jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("File_putstr");
    }
  }

  final public void File_putline() throws ParseException {
    trace_call("File_putline");
    try {/*@bgen(jjtree) File_putline */
  ASTFile_putline jjtn000 = new ASTFile_putline(JJTFILE_PUTLINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(PUTLINE);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                                  jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("File_putline");
    }
  }

  final public void File_flush() throws ParseException {
    trace_call("File_flush");
    try {/*@bgen(jjtree) File_flush */
  ASTFile_flush jjtn000 = new ASTFile_flush(JJTFILE_FLUSH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(FLUSH);
        AddExpr();
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("File_flush");
    }
  }

  final public void File_isfile() throws ParseException {
    trace_call("File_isfile");
    try {/*@bgen(jjtree) File_isfile */
  ASTFile_isfile jjtn000 = new ASTFile_isfile(JJTFILE_ISFILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(ISFILE);
        AddExpr();
        jj_consume_token(RP);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("File_isfile");
    }
  }

  final public void File_rename() throws ParseException {
    trace_call("File_rename");
    try {/*@bgen(jjtree) File_rename */
  ASTFile_rename jjtn000 = new ASTFile_rename(JJTFILE_RENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(RENAME);
        AddExpr();
        jj_consume_token(CM);
        AddExpr();
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                                 jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("File_rename");
    }
  }

  final public void File_remove() throws ParseException {
    trace_call("File_remove");
    try {/*@bgen(jjtree) File_remove */
  ASTFile_remove jjtn000 = new ASTFile_remove(JJTFILE_REMOVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(REMOVE);
        AddExpr();
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("File_remove");
    }
  }

  final public void Sleep() throws ParseException {
    trace_call("Sleep");
    try {/*@bgen(jjtree) Sleep */
  ASTSleep jjtn000 = new ASTSleep(JJTSLEEP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(SLEEP);
        AddExpr();
        jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Sleep");
    }
  }

  final public void Ident() throws ParseException {
    trace_call("Ident");
    try {/*@bgen(jjtree) Ident */
        ASTIdent jjtn000 = new ASTIdent(JJTIDENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(IDENT);
        if (jj_2_10(2)) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LD:{
            jj_consume_token(LD);
            ArrayNum();
            jj_consume_token(RD);
            break;
            }
          case LP:{
            jj_consume_token(LP);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case SUBOP:
            case LP:
            case TRUE:
            case FALSE:
            case EOF_STR:
            case LF_STR:
            case CR_STR:
            case NL_STR:
            case HT_STR:
            case NULL_STR:
            case GET:
            case RANDOM:
            case SIN:
            case COS:
            case TAN:
            case SQRT:
            case FLOOR:
            case CEIL:
            case ROUND:
            case ABS:
            case INT:
            case LONG:
            case LOG:
            case LENGTH:
            case APPEND:
            case SUBSTRING:
            case INSERT:
            case REPLACE:
            case EXTRACT:
            case Str2Int:
            case Int2Str:
            case Compare:
            case OPENR:
            case OPENW:
            case OPENA:
            case GETSTR:
            case GETLINE:
            case ISFILE:
            case LITERAL:
            case FLOAT_LITERAL:
            case IDENT:
            case STRLIT:{
              AddExpr();
              label_19:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case CM:{
                  ;
                  break;
                  }
                default:
                  jj_la1[54] = jj_gen;
                  break label_19;
                }
                jj_consume_token(CM);
                AddExpr();
              }
              break;
              }
            default:
              jj_la1[55] = jj_gen;
              ;
            }
            jj_consume_token(RP);
jjtn000.flag = false;
            break;
            }
          default:
            jj_la1[56] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } else {
          ;
        }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
jjtn000.varName = str2Half(t.image, t.beginLine);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Ident");
    }
  }

  final public void ArrayNum() throws ParseException {
    trace_call("ArrayNum");
    try {/*@bgen(jjtree) ArrayNum */
  ASTArrayNum jjtn000 = new ASTArrayNum(JJTARRAYNUM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        AddExpr();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CM:{
          jj_consume_token(CM);
          ArrayNum();
          break;
          }
        default:
          jj_la1[57] = jj_gen;
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("ArrayNum");
    }
  }

  final public void FunctionCall() throws ParseException {
    trace_call("FunctionCall");
    try {/*@bgen(jjtree) FunctionCall */
        ASTFunctionCall jjtn000 = new ASTFunctionCall(JJTFUNCTIONCALL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(IDENT);
        jj_consume_token(LP);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SUBOP:
        case LP:
        case TRUE:
        case FALSE:
        case EOF_STR:
        case LF_STR:
        case CR_STR:
        case NL_STR:
        case HT_STR:
        case NULL_STR:
        case GET:
        case RANDOM:
        case SIN:
        case COS:
        case TAN:
        case SQRT:
        case FLOOR:
        case CEIL:
        case ROUND:
        case ABS:
        case INT:
        case LONG:
        case LOG:
        case LENGTH:
        case APPEND:
        case SUBSTRING:
        case INSERT:
        case REPLACE:
        case EXTRACT:
        case Str2Int:
        case Int2Str:
        case Compare:
        case OPENR:
        case OPENW:
        case OPENA:
        case GETSTR:
        case GETLINE:
        case ISFILE:
        case LITERAL:
        case FLOAT_LITERAL:
        case IDENT:
        case STRLIT:{
          AddExpr();
          label_20:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case CM:{
              ;
              break;
              }
            default:
              jj_la1[58] = jj_gen;
              break label_20;
            }
            jj_consume_token(CM);
            AddExpr();
          }
          break;
          }
        default:
          jj_la1[59] = jj_gen;
          ;
        }
        jj_consume_token(RP);
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
jjtn000.varName = str2Half(t.image, t.beginLine);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("FunctionCall");
    }
  }

  final public void Return() throws ParseException {
    trace_call("Return");
    try {/*@bgen(jjtree) Return */
  ASTReturn jjtn000 = new ASTReturn(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        AddExpr();
        jj_consume_token(RETURN);
jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Return");
    }
  }

  final public void Break() throws ParseException {
    trace_call("Break");
    try {/*@bgen(jjtree) Break */
  ASTBreak jjtn000 = new ASTBreak(JJTBREAK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(BREAK);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
jjtn000.line_num1 = jj_consume_token(SM).beginLine;
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Break");
    }
  }

  final public void Literal() throws ParseException {
    trace_call("Literal");
    try {/*@bgen(jjtree) Literal */
        ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(LITERAL);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
try {
                                if(Long.parseLong(t.image) > Integer.MAX_VALUE || Long.parseLong(t.image) <  Integer.MIN_VALUE){
                                        jjtn000.litValue = new Long(Long.parseLong(t.image));
                                } else {
                                        jjtn000.litValue = new Integer(Integer.parseInt(t.image));
                                }
                        } catch (NumberFormatException e){
                                jjtn000.litValue = new Double(Double.parseDouble(t.image));
                        } catch (Exception e) {
                                jjtn000.litValue = null;
                                gui.consoleAppend.appendAll(
                                        "### " + t.beginLine + "\u884c\u76ee\u306f\u7121\u52b9\u306a\u5024\u3067\u3059 : "
                                        + t.image + "\n"
                                );
                                {if (true) throw new ParseException();}
                        }
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Literal");
    }
  }

  final public void FloatLiteral() throws ParseException {
    trace_call("FloatLiteral");
    try {/*@bgen(jjtree) FloatLiteral */
        ASTFloatLiteral jjtn000 = new ASTFloatLiteral(JJTFLOATLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(FLOAT_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
try {
                                jjtn000.litValue = new Double(Double.parseDouble(t.image));
                        } catch (NumberFormatException e){
                                jjtn000.litValue = null;
                                gui.consoleAppend.appendAll(
                                        "### NumberFormatException\n");
                                gui.consoleAppend.appendAll(
                                        "### " + t.beginLine + "\u884c\u76ee\u306f\u7121\u52b9\u306a\u5024\u3067\u3059 : "
                                        + t.image + "\n"
                                );
                                {if (true) throw new ParseException();}
                        } catch (Exception e) {
                                jjtn000.litValue = null;
                                gui.consoleAppend.appendAll(
                                        "### " + t.beginLine + "\u884c\u76ee\u306f\u7121\u52b9\u306a\u5024\u3067\u3059 : "
                                        + t.image + "\n"
                                );
                                {if (true) throw new ParseException();}
                        }
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("FloatLiteral");
    }
  }

  final public void True() throws ParseException {
    trace_call("True");
    try {/*@bgen(jjtree) True */
  ASTTrue jjtn000 = new ASTTrue(JJTTRUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(TRUE);
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("True");
    }
  }

  final public void False() throws ParseException {
    trace_call("False");
    try {/*@bgen(jjtree) False */
  ASTFalse jjtn000 = new ASTFalse(JJTFALSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(FALSE);
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("False");
    }
  }

  final public void Strlit() throws ParseException {
    trace_call("Strlit");
    try {/*@bgen(jjtree) Strlit */
        ASTStrlit jjtn000 = new ASTStrlit(JJTSTRLIT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(STRLIT);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
jjtn000.litString = t.image;
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Strlit");
    }
  }

  final public void EXTRA_STR() throws ParseException {
    trace_call("EXTRA_STR");
    try {/*@bgen(jjtree) EXTRA_STR */
  ASTEXTRA_STR jjtn000 = new ASTEXTRA_STR(JJTEXTRA_STR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EOF_STR:{
          jj_consume_token(EOF_STR);
jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
jjtn000.char_code[0] = 0xFFFF;
          break;
          }
        case NULL_STR:{
          jj_consume_token(NULL_STR);
jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
jjtn000.char_code[0] = 0x0000;
          break;
          }
        case LF_STR:{
          jj_consume_token(LF_STR);
jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
jjtn000.char_code[0] = 0x000A;
          break;
          }
        case NL_STR:{
          jj_consume_token(NL_STR);
jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
String str = System.getProperty("line.separator");
                                if( str.length() > 1 ){
                                        jjtn000.char_code[1] = str.charAt(1);
                                }
          break;
          }
        case CR_STR:{
          jj_consume_token(CR_STR);
jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
jjtn000.char_code[0] = 0x000D;
          break;
          }
        case HT_STR:{
          jj_consume_token(HT_STR);
jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
jjtn000.char_code[0] = 0x0009;
          break;
          }
        default:
          jj_la1[60] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("EXTRA_STR");
    }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_3R_127()
 {
    if (jj_scan_token(SQRT)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_126()
 {
    if (jj_scan_token(TAN)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_125()
 {
    if (jj_scan_token(COS)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_149()
 {
    if (jj_scan_token(ISFILE)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_124()
 {
    if (jj_scan_token(SIN)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_123()
 {
    if (jj_scan_token(RANDOM)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_121()
 {
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_120()
 {
    if (jj_3R_148()) return true;
    return false;
  }

  private boolean jj_3R_122()
 {
    if (jj_scan_token(GET)) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_119()
 {
    if (jj_3R_147()) return true;
    return false;
  }

  private boolean jj_3R_118()
 {
    if (jj_3R_146()) return true;
    return false;
  }

  private boolean jj_3R_117()
 {
    if (jj_3R_145()) return true;
    return false;
  }

  private boolean jj_3R_116()
 {
    if (jj_3R_144()) return true;
    return false;
  }

  private boolean jj_3R_115()
 {
    if (jj_3R_143()) return true;
    return false;
  }

  private boolean jj_3R_114()
 {
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3R_113()
 {
    if (jj_3R_141()) return true;
    return false;
  }

  private boolean jj_3R_112()
 {
    if (jj_3R_140()) return true;
    return false;
  }

  private boolean jj_3R_111()
 {
    if (jj_3R_139()) return true;
    return false;
  }

  private boolean jj_3R_110()
 {
    if (jj_3R_138()) return true;
    return false;
  }

  private boolean jj_3R_148()
 {
    if (jj_scan_token(GETLINE)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_109()
 {
    if (jj_3R_137()) return true;
    return false;
  }

  private boolean jj_3R_108()
 {
    if (jj_3R_136()) return true;
    return false;
  }

  private boolean jj_3R_107()
 {
    if (jj_3R_135()) return true;
    return false;
  }

  private boolean jj_3R_106()
 {
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_105()
 {
    if (jj_3R_133()) return true;
    return false;
  }

  private boolean jj_3R_104()
 {
    if (jj_3R_132()) return true;
    return false;
  }

  private boolean jj_3R_147()
 {
    if (jj_scan_token(GETSTR)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(CM)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_103()
 {
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_102()
 {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3R_101()
 {
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_100()
 {
    if (jj_3R_128()) return true;
    return false;
  }

  private boolean jj_3R_99()
 {
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_98()
 {
    if (jj_3R_126()) return true;
    return false;
  }

  private boolean jj_3R_97()
 {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_96()
 {
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_95()
 {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_146()
 {
    if (jj_scan_token(OPENA)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_93()
 {
    if (jj_scan_token(HT_STR)) return true;
    return false;
  }

  private boolean jj_3R_92()
 {
    if (jj_scan_token(CR_STR)) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_scan_token(CM)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_80()
 {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_94()
 {
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_87()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_79()
 {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_145()
 {
    if (jj_scan_token(OPENW)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_3R_44()) return true;
    if (jj_scan_token(INPUT)) return true;
    return false;
  }

  private boolean jj_3R_78()
 {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_77()
 {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_76()
 {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_91()
 {
    if (jj_scan_token(NL_STR)) return true;
    return false;
  }

  private boolean jj_3R_75()
 {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_90()
 {
    if (jj_scan_token(LF_STR)) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_3R_44()) return true;
    if (jj_scan_token(ASGNOP)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_74()
 {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_89()
 {
    if (jj_scan_token(NULL_STR)) return true;
    return false;
  }

  private boolean jj_3R_73()
 {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_144()
 {
    if (jj_scan_token(OPENR)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_88()
 {
    if (jj_scan_token(EOF_STR)) return true;
    return false;
  }

  private boolean jj_3R_86()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_3R_41()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_42()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_64()
 {
    if (jj_scan_token(SUBOP)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_68()
 {
    if (jj_scan_token(SUROP)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_67()
 {
    if (jj_scan_token(DIVOP2)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_66()
 {
    if (jj_scan_token(DIVOP)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_69()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_72()
 {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_85()
 {
    if (jj_scan_token(STRLIT)) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_scan_token(SUBOP)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_scan_token(ADDOP)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_84()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_59()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    return false;
  }

  private boolean jj_3R_63()
 {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_scan_token(NOTOP)) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_65()
 {
    if (jj_scan_token(MULOP)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_83()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_150()
 {
    if (jj_scan_token(CM)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_143()
 {
    if (jj_scan_token(Compare)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(CM)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_3R_59()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_60()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_scan_token(NOTOP)) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_scan_token(GEOP)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_142()
 {
    if (jj_scan_token(Int2Str)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_scan_token(LEOP)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_scan_token(GTOP)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    if (jj_scan_token(LSOP)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_scan_token(NTOP)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_141()
 {
    if (jj_scan_token(Str2Int)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_3R_47()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_140()
 {
    if (jj_scan_token(EXTRACT)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(CM)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(CM)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_45()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_scan_token(EQOP)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_82()
 {
    if (jj_scan_token(FLOAT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_139()
 {
    if (jj_scan_token(REPLACE)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(CM)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(CM)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(CM)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_29()) return true;
    if (jj_scan_token(RP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_3R_38()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_62()
 {
    if (jj_scan_token(ANDOP)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_138()
 {
    if (jj_scan_token(INSERT)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(CM)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(CM)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_scan_token(PUTLN)) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_scan_token(OROP)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_61()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) return true;
    }
    return false;
  }

  private boolean jj_3R_137()
 {
    if (jj_scan_token(SUBSTRING)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(CM)) return true;
    if (jj_3R_38()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_150()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_50()
 {
    if (jj_scan_token(CM)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_57()
 {
    if (jj_3R_61()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_136()
 {
    if (jj_scan_token(APPEND)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(CM)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_71()
 {
    if (jj_scan_token(CM)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    if (jj_3R_57()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_81()
 {
    if (jj_scan_token(LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_135()
 {
    if (jj_scan_token(LENGTH)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_43()
 {
    if (jj_3R_38()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_50()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_134()
 {
    if (jj_scan_token(LONG)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_3R_38()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_71()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_22()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  private boolean jj_3R_133()
 {
    if (jj_scan_token(INT)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_scan_token(CM2)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_scan_token(LP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_70()
 {
    if (jj_scan_token(CM)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_132()
 {
    if (jj_scan_token(LOG)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(LP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_scan_token(LD)) return true;
    if (jj_3R_48()) return true;
    if (jj_scan_token(RD)) return true;
    return false;
  }

  private boolean jj_3R_131()
 {
    if (jj_scan_token(ABS)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_3R_35()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_36()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_3R_38()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_130()
 {
    if (jj_scan_token(ROUND)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_scan_token(CASEDEFAULT)) return true;
    return false;
  }

  private boolean jj_3R_129()
 {
    if (jj_scan_token(CEIL)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(CASE)) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_scan_token(IDENT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_128()
 {
    if (jj_scan_token(FLOOR)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public IntVParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[61];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xa0000201,0x0,0x0,0xa0000200,0xa0000200,0x0,0xa0000200,0xa0000200,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0xa0000200,0x0,0xa0000200,0xa0000200,0x0,0x0,0xa0000200,0xa0000200,0x0,0x0,0xa0000200,0x0,0xa0000200,0xa0000200,0xa0000200,0x0,0xa0000200,0x20000200,0x0,0x0,0xa0000200,0x800000,0x400000,0x1000000,0x1000000,0x3f0000,0x3f0000,0x300,0x3c00,0x3c00,0x20000200,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000200,0x28000000,0x0,0x0,0x20000200,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4113f7f8,0x1f000,0x1f000,0x4101f7f8,0x4101f7f8,0x1f000,0x4101f7f8,0x4101f7f8,0x120000,0x1f000,0x1,0x1f000,0x1,0x0,0x1,0x410007f8,0x1,0x410007f8,0x410007f8,0x18000000,0x18000000,0x410007f8,0x410007f8,0x18000000,0x18000000,0x410007f8,0x0,0x410007f8,0x410007f8,0x410007f8,0x20000000,0x410007f8,0x7f8,0x2,0x0,0x410007f8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7f8,0x7f8,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x7f8,0x0,0x1,0x1,0x7f8,0x7e0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0xffff4840,0x0,0x0,0xffff4840,0xffff4840,0x0,0xffff4840,0xffff4840,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffff4040,0x0,0xffff4840,0xffff4840,0x0,0x0,0xffff4840,0xffff4840,0x0,0x0,0xffff4840,0x30,0xffff4840,0xffff4840,0xffff4840,0x102,0xffff4840,0xffff0800,0x0,0x3000,0xffff4840,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffff0000,0xffff0000,0xffff0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffff0000,0x0,0x0,0x0,0xffff0000,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0xffffffff,0x0,0x0,0xffffffff,0xffffffff,0x0,0xffffffff,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0xffffffff,0xffffffff,0x0,0x0,0xffffffff,0xffffffff,0x0,0x0,0xffffffff,0x0,0xffffffff,0xffffffff,0xffffffff,0x0,0xffffffff,0x3f,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x3f,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x3f,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x173fffff,0x0,0x0,0x173fffff,0x173fffff,0x0,0x173fffff,0x173fffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x173fffff,0x0,0x173fffff,0x173fffff,0x0,0x0,0x173fffff,0x173fffff,0x0,0x0,0x173fffff,0x0,0x173fffff,0x173fffff,0x173fffff,0x0,0x173fffff,0x17046e00,0x0,0x0,0x173fffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x17046e00,0x17046e00,0x46e00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x17046e00,0x0,0x0,0x0,0x17046e00,0x0,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[10];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public IntVParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public IntVParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new IntVParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 61; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 61; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public IntVParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new IntVParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 61; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
      token_source = new IntVParserTokenManager(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 61; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public IntVParser(IntVParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 61; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(IntVParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 61; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) {
       return;
    }

    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];

      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }

      for (int[] oldentry : jj_expentries) {
        if (oldentry.length == jj_expentry.length) {
          boolean isMatched = true;

          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              isMatched = false;
              break;
            }

          }
          if (isMatched) {
            jj_expentries.add(jj_expentry);
            break;
          }
        }
      }

      if (pos != 0) {
        jj_lasttokens[(jj_endpos = pos) - 1] = kind;
      }
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[165];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 61; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 165; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  protected void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  protected void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  protected void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + TokenMgrError.addEscapes(t.image) + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  protected void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + TokenMgrError.addEscapes(t1.image) + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 10; i++) {
      try {
        JJCalls p = jj_2_rtns[i];

        do {
          if (p.gen > jj_gen) {
            jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
            switch (i) {
              case 0: jj_3_1(); break;
              case 1: jj_3_2(); break;
              case 2: jj_3_3(); break;
              case 3: jj_3_4(); break;
              case 4: jj_3_5(); break;
              case 5: jj_3_6(); break;
              case 6: jj_3_7(); break;
              case 7: jj_3_8(); break;
              case 8: jj_3_9(); break;
              case 9: jj_3_10(); break;
            }
          }
          p = p.next;
        } while (p != null);

        } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }

    p.gen = jj_gen + xla - jj_la; 
    p.first = token;
    p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
