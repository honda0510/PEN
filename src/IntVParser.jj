/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. IntVParser.jj */
/*@egen*//**
 **	 Interpreter (JJTree & Visitor)
 **/

options {
	STATIC=false;
	UNICODE_INPUT=true;
	DEBUG_PARSER=true;
	           
	             
}

PARSER_BEGIN(IntVParser)

public class IntVParser/*@bgen(jjtree)*/implements IntVParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTIntVParserState jjtree = new JJTIntVParserState();

/*@egen*/
	public int nParseErrors = 0;
	private MainGUI gui;
	
	public void setMainGUI(MainGUI gui){
		this.gui = gui;
	}
	
	public String str2Half(String str, int line){
		StringBuffer sb = new StringBuffer();
		for(int i = 0; i < str.length(); i++){
			int c = (int)str.charAt(i);
		        if((c >= 65345 && c <= 65370) || (c >= 65313 && c <= 65338) ){
						if(gui.penPro.containsKey(PenProperties.EXECUTER_VAR_NAMES) == false || Integer.parseInt(gui.penPro.getProperty(PenProperties.EXECUTER_VAR_NAMES)) == 0) {
							throw new VarNameError(String.valueOf((char) c), line);
		        		} else if(Integer.parseInt(gui.penPro.getProperty(PenProperties.EXECUTER_VAR_NAMES)) == 2) {
		                	c -= 65248;
						}
				}
			sb.append((char)c);
		}
		return sb.toString();
	}
}

PARSER_END(IntVParser)

TOKEN_MGR_DECLS :
{
	public int nLexicalErrors = 0;
}

SKIP :
{
	" "
	|	"\t"
//	|	"\n"
	|	"\r"
	|	"\f"
	|	"|"
	|	"\uff5c"
	|	"\u3000"
}

TOKEN :
{
	< ADDOP: "\uff0b" | "+" >
	|	< SUBOP: "\uff0d" | "-" >
	|	< MULOP: "\u00d7" | "*" >
	|	< DIVOP: "\u00f7" >
	|	< DIVOP2: "/" >
	|	< SUROP: "\uff05" | "%" >
	|	< ASGNOP: "\u2190" | ":=" >
	|	< INOP: "->">
	|	< EQOP: "\uff1d" | "=" >
	|	< GTOP: "\uff1e" | ">" >
	|	< GEOP: "\u2267" | ">=" >
	|	< LSOP: "\uff1c" | "<" >
	|	< LEOP: "\u2266" | "<=" >
	|	< NTOP: "\u2260" | "!=" >
	|	< ANDOP: "\u304b\u3064" >
	|	< OROP: "\u307e\u305f\u306f" >
	|	< NOTOP: "\u3067\u306a\u3044" >
	|	< LC: "{" >
	|	< RC: "}" >
	|	< LD: "[" >
	|	< RD: "]" >
	|	< LP: "(" >
	|	< RP: ")" >
	|	< SM: "\n" >
	|	< CM: "," | "\uff0c" | "\u3001" >
	|	< CM2: "\u3068" >
	|	< PN: "." >
	|	< TRUE	: ( "true" | "TRUE" | "\u771f" ) >
	|	< FALSE	: ( "false" | "FALSE" | "\u507d" ) >
	|	< EOF_STR: "EOF" >
	|	< LF_STR: "LF">
	|	< CR_STR: "CR" >
	|	< NL_STR: "NL">
	|	< HT_STR: "HT">
	|	< NULL_STR: "NULL" >
}

TOKEN [IGNORE_CASE] :
{
	<VARGLOBAL			: "\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570">
	|	< VARINT		: "\u6574\u6570" >
	|	< VARLONG		: "\u9577\u6574\u6570" >
	|	< VARDOUBLE		: "\u5b9f\u6570" >
	|	< VARSTRING		: "\u6587\u5b57\u5217" >
	|	< VARBOOLEAN	: "\u771f\u507d" >
	|	< PROCEDURAL		: "\u624b\u7d9a\u304d" >
	|	< ENDPROCEDURAL		: "\u624b\u7d9a\u304d" ( "\u7d42\u4e86" | "\u7d42\u308f\u308a" ) >
	|	< BREAKPROCEDURAL	: "\u624b\u7d9a\u304d\u3092\u629c\u3051\u308b" >
	|	< FUNCTION			: "\u95a2\u6570" >
	|	< ENDFUNCTION		: "\u95a2\u6570" ( "\u7d42\u4e86" | "\u7d42\u308f\u308a" ) >
	|	< BREAKFUNCTION		: "\u95a2\u6570\u3092\u629c\u3051\u308b" >
	|	< RETURN			: "\u3092\u8fd4\u3059" >
	|	< IF		: "\u3082\u3057" >
	|	< ENDIF		: "\u3092" ( "\u5b9f\u884c\u3059\u308b" | "\u5b9f\u884c" ) >
	|	< THEN		: ( "\u306a\u3089\u3070" | "\u306a\u3089" ) >
	|	< ELSE		: "\u3092\u5b9f\u884c\u3057" <CM> "\u305d\u3046\u3067" ( "\u306a\u3051\u308c\u3070" | "\u306a\u3044\u306a\u3089" | "\u306a\u3044\u306a\u3089\u3070" ) >
	|	< ELSEIF	: "\u3092\u5b9f\u884c\u3057" <CM> "\u305d\u3046\u3067" ( "\u306a\u304f" | "\u306a\u304f\u3066" ) >
	|	< WHILE		: "\u306e\u9593" <CM> >
	|	< DOWHILE	: ( "\u7e70\u308a\u8fd4\u3057" | "\u7e70\u8fd4\u3057" ) <CM> >
	|	< DOWHILE2	: "\u3092" <CM> >
	|	< DOWHILE3	: "\u306b\u306a\u308b\u307e\u3067" ( "\u5b9f\u884c\u3059\u308b" | "\u5b9f\u884c" ) >
	|	< FOR		: "\u3092" >
	|	< FOR2		: "\u304b\u3089" >
	|	< FOR3		: "\u307e\u3067" >
	|	< FORADD	: "\u305a\u3064\u5897\u3084\u3057" ( "\u306a\u304c\u3089" | "\u3064\u3064" ) <CM> >
	|	< FORSUB	: "\u305a\u3064\u6e1b\u3089\u3057" ( "\u306a\u304c\u3089" | "\u3064\u3064" ) <CM> >
	|	< INFINITE	: ( "\u305a\u3063\u3068" | "\u6c38\u9060\u306b" ) <CM> >
	|	< ENDLOOP	: "\u3092" ( "\u7e70\u308a\u8fd4\u3059" | "\u7e70\u8fd4\u3059" ) >
	|	< SWITCH	: "\u306e\u5024\u306b\u5fdc\u3058\u3066" >
	|	< ENDSWITCH	: "\u306e\u3044\u305a\u308c\u304b\u3092\u5b9f\u884c\u3059\u308b" >
	|	< CASE		: "\u306e\u5834\u5408\uff1a" >
	|	< CASEDEFAULT	: "\u305d\u306e\u4ed6\u306e\u5834\u5408\uff1a" >
	|	< PUTLN		: ( "\u3092" | "\u3068" ) ( "\u8868\u793a" | "\u51fa\u529b" | "\u5370\u5237" ) "\u3059\u308b" >
	|	< PUT		: ( "\u3092" | "\u3068" ) "\u6539\u884c" ( "\u306a\u3057" | "\u7121\u3057" ) "\u3067" ( "\u8868\u793a" | "\u51fa\u529b" | "\u5370\u5237" ) "\u3059\u308b">
	|	< BREAK		: ( "\u7e70\u308a\u8fd4\u3057" | "\u7e70\u8fd4\u3057" | "\u30eb\u30fc\u30d7" )"\u3092\u629c\u3051\u308b" >
	|	< INPUT		: ( "\u3092" | "\u306b" ) "\u5165\u529b\u3059\u308b" >
	|	< GET		: "input" <LP> >
	|	< RANDOM	: "random" <LP> >
	|	< SIN		: "sin" <LP> >
	|	< COS		: "cos" <LP> >
	|	< TAN		: "tan" <LP> >
	|	< SQRT		: "sqrt" <LP> >
	|	< FLOOR		: "floor" <LP> >
	|	< CEIL		: "ceil" <LP> >
	|	< ROUND		: "round" <LP> >
	|	< ABS		: "abs" <LP> >
	|	< INT		: "int" <LP> >
	|	< LONG		: "long" <LP> >
	|	< LOG		: "log" <LP> >
	|	< LENGTH	: "length" <LP> >
	|	< APPEND	: "append" <LP> >
	|	< SUBSTRING	: "substring" <LP> >
	|	< INSERT	: "insert" <LP> >
	|	< REPLACE	: "replace" <LP> >
	|	< EXTRACT	: "extract" <LP> >
	|	< Str2Int	: "str2int" <LP> >
	|	< Int2Str	: "int2str" <LP> >
	|	< Compare	: "compare" <LP> >
	|	< gOpenWindow	: ( "gOpenWindow"	| "gWindowOpen"	| "\u63cf\u753b\u9818\u57df\u958b\u304f" )	<LP> >
	|	< gOpenGWindow	: ( "gOpenGraphWindow" ) <LP> >
	|	< gCloseWindow	: ( "gCloseWindow"	| "gWindowClose"| "\u63cf\u753b\u9818\u57df\u9589\u3058\u308b" )	<LP> >
	|	< gClearWindow	: ( "gClearWindow"	| "gWindowClear"| "\u63cf\u753b\u9818\u57df\u5168\u6d88\u53bb" )	<LP> >
	|	< gSaveWindow	: ( "gSaveWindow"	| "gWindowSave" | "\u63cf\u753b\u9818\u57df\u4fdd\u5b58")	<LP> >
	|	< gSetOrigin	: ( "gSetOrigin" ) <LP> >
	|	< gSetMap		: ( "gSetMap" ) <LP> >
	|	< gSetDotShape	: ( "gSetDotShape"	| "\u70b9\u7a2e"	( "\u8a2d\u5b9a" | "\u5909\u66f4" ) )	<LP> >
	|	< gSetLineColor	: ( "gSetLineColor"	| "\u7dda\u8272"	( "\u8a2d\u5b9a" | "\u5909\u66f4" ) )	<LP> >
	|	< gSetFillColor	: ( "gSetFillColor"	| "\u5857\u8272"	( "\u8a2d\u5b9a" | "\u5909\u66f4" ) )	<LP> >
	|	< gSetLineShape	: ( "gSetLineShape"	| "\u7dda\u7a2e"	( "\u8a2d\u5b9a" | "\u5909\u66f4" ) )	<LP> >
	|	< gSetLineWidth	: ( "gSetLineWidth"	| "\u7dda\u592a\u3055"	( "\u8a2d\u5b9a" | "\u5909\u66f4" ) )	<LP> >
	|	< gSetArrowType	: ( "gSetArrowType"	| "\u7dda\u77e2"	( "\u8a2d\u5b9a" | "\u5909\u66f4" ) )	<LP> >
	|	< gSetArrowDir	: ( "gSetArrowDir"	| "\u7dda\u65b9\u5411"	( "\u8a2d\u5b9a" | "\u5909\u66f4" ) )	<LP> >
	|	< gSetTextColor	: ( "gSetTextColor"	| "\u6587\u5b57\u8272"	( "\u8a2d\u5b9a" | "\u5909\u66f4" ) )	<LP> >
	|	< gSetFont		: ( "gSetFont"		| "\u6587\u5b57\u7a2e"	( "\u8a2d\u5b9a" | "\u5909\u66f4" ) )	<LP> >
	|	< gSetFontType	: ( "gSetFontType"	| "\u6587\u5b57\u30bf\u30a4\u30d7"	( "\u8a2d\u5b9a" | "\u5909\u66f4" ) )	<LP> >
	|	< gSetFontSize	: ( "gSetFontSize"	| "\u6587\u5b57\u30b5\u30a4\u30ba"	( "\u8a2d\u5b9a" | "\u5909\u66f4" ) )	<LP> >
	|	< gDrawPoint	: ( "gDrawPoint"	| "\u70b9\u63cf\u753b" )	<LP> >
	|	< gDrawLine		: ( "gDrawLine"		| "\u7dda\u63cf\u753b" )	<LP> >
	|	< gDrawText		: ( "gDrawText"		| "\u6587\u5b57\u63cf\u753b" )	<LP> >
	|	< gDrawCircle	: ( "gDrawCircle"	| "\u5186\u63cf\u753b" )	<LP> >
	|	< gFillCircle	: ( "gFillCircle"	| "\u5186\u5857\u63cf\u753b" )	<LP> >
	|	< gDrawOval		: ( "gDrawOval"		| "\u6955\u5186\u63cf\u753b" )	<LP> >
	|	< gFillOval		: ( "gFillOval"		| "\u6955\u5186\u5857\u63cf\u753b" )	<LP> >
	|	< gDrawBox		: ( "gDrawBox"		| "\u77e9\u5f62\u63cf\u753b" )		<LP> >
	|	< gFillBox		: ( "gFillBox"		| "\u77e9\u5f62\u5857\u63cf\u753b" )	<LP> >
	|	< gDrawArc		: ( "gDrawArc"		| "\u5f27\u63cf\u753b" )		<LP> >
	|	< gFillArc		: ( "gFillArc"		| "\u5f27\u5857\u63cf\u753b" )		<LP> >
	|	< gDrawPolygon	: "gDrawPolygon"	<LP> >
	|	< gFillPolygon	: "gFillPolygon"	<LP> >
	|	< gDrawPolyline	: "gDrawPolyline"	<LP> >
	|	< gDrawImage	: "gDrawImage"	<LP> >
	|	< gSetRepaintFlag	: ( "gSetRepaintFlag" ) <LP> >
	|	< gRepaint		: ( "gRepaint" ) <LP> >
	|	< OPENR		: "openr" <LP> >
	|	< OPENW		: "openw" <LP> >
	|	< OPENA		: "opena" <LP> >
	|	< CLOSE		: "close" <LP> >
	|	< GETSTR	: "getstr" <LP> >
	|	< GETLINE	: "getline" <LP> >
	|	< PUTSTR	: "putstr" <LP> >
	|	< PUTLINE	: "putline" <LP> >
	|	< FLUSH		: "flush" <LP> >
	|	< ISFILE	: "isfile" <LP> >
	|	< RENAME	: "rename" <LP> >
	|	< REMOVE	: "remove" <LP> >
	|	< SLEEP		: ( "sleep" | "delay" ) <LP> >
}

TOKEN :
{
	< #DIGIT: [ "0"-"9"] >
	|	< #LETTER: [ "a"-"z",
						"A"-"Z",
						"_",
						"\uff21"-"\uff3a",
						"\uff41"-"\uff5a",
						"\u3041"-"\u3093",
						"\u30a1"-"\u30f6",
						"\u4e00"-"\u9fa0"
					] >
}

TOKEN :
{
	< LITERAL: (<DIGIT>)+ >
	|	< FLOAT_LITERAL: <LITERAL> (<PN> <LITERAL>) >
	|	< IDENT: <LETTER> (<LETTER>|<DIGIT>)* >
		{	int idx;
			int len = image.length();
			
			if (!Character.isJavaIdentifierStart(image.charAt(0))) {
				++nLexicalErrors;
				throw new ParseError(
					"### " + matchedToken.beginLine + "\u884c\u76ee\u3067"
					+ "\u30a8\u30e9\u30fc\u3067\u3059 : \""
					+ matchedToken.image.charAt(0)
					+ "\"("
					+ Integer.toHexString(matchedToken.image.charAt(0))
					+ ")\n"
				);
			}
			for (idx = 1; idx < len; ++idx) {
				if (!Character.isJavaIdentifierPart(image.charAt(idx))) {
					++nLexicalErrors;
					throw new ParseError(
						"### " + matchedToken.beginLine + "\u884c\u76ee\u3067"
						+ "\u30a8\u30e9\u30fc\u3067\u3059 : \""
						+ matchedToken.image.charAt(idx)
						+ "\"("
						+ Integer.toHexString(matchedToken.image.charAt(idx))
						+ ")\n"
					);
				}
			}
		}
}

MORE:
{
	< "\""| "\u300c"> :STR
}
<STR>TOKEN:
{
	< STRLIT: "\"" | "\u300d" | "\n" | "\r" >
		{
			if ( (image.charAt(0) == '\"' && image.charAt(image.length()-1) == '\"') ||
			 (image.charAt(0) == '\u300c' && image.charAt(image.length()-1) == '\u300d') ){
				matchedToken.image = image.substring(1, image.length()-1);
			}else{
				++nLexicalErrors;
				matchedToken.image = image.substring(1, image.length()-2);
				throw new ParseError(
					"### " + matchedToken.beginLine + "\u884c\u76ee\u306e"
					+ "\u51fa\u529b\u6587\u3067[\"] \u304b[ \u300d]\u3092\u5fd8\u308c\u3066\u3044\u307e\u305b\u3093\u304b\uff1f\n"
				);
			}
		}
		:DEFAULT
}
<STR>MORE:
{
	< "\\\"" | "\\\u300d" | "\\\u300c" >
		{	image.deleteCharAt(image.length() - 2); }
}
<STR>MORE:
{
	< "\\n" >
		{
			image.delete(image.length() - 2, image.length());
			image.append('\n');
		}
}
<STR>MORE:
{
	< "\\r" >
		{
			image.delete(image.length() - 2, image.length());
			image.append('\r');
		}
}
<STR>MORE:
{
	< "\\t" >
		{
			image.delete(image.length() - 2, image.length());
			image.append('\t');
		}
}
<STR>MORE:
{
	< ~[] >
}

MORE:
{
	"/*" :COMM
}
<COMM>SPECIAL_TOKEN:
{
	< COMMENT: "*/" > :DEFAULT
}
<COMM>MORE:
{
	< ~[] >
}

void IntVUnit() :
{/*@bgen(jjtree) IntVUnit */
        ASTIntVUnit jjtn000 = new ASTIntVUnit(JJTINTVUNIT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/	Token t; }
{/*@bgen(jjtree) IntVUnit */
        try {
/*@egen*/
	(
		try {
			VarDecl()
			|	Function()
			|	Stat()
			|	<EOF>
				{ return; }
			|	ErrorOccur()
		} catch (ParseException e) {
			++nParseErrors;
			gui.consoleAppend.appendAll("### " + e.getMessage() + "\n");
			throw new ParseException();
		}
	)*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

JAVACODE
void ErrorOccur() {/*@bgen(jjtree) ErrorOccur */
     ASTErrorOccur jjtn000 = new ASTErrorOccur(JJTERROROCCUR);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {
/*@egen*/
	ParseException e = generateParseException();
	throw e;/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

void Function() :
{/*@bgen(jjtree) Function */
  ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Function */
        try {
/*@egen*/
	( 
		<FUNCTION> (
			<VARINT>		{ jjtn000.decl = Declaration.INT; }
			|	<VARLONG>	{ jjtn000.decl = Declaration.LONG; }
			|	<VARDOUBLE>	{ jjtn000.decl = Declaration.DOUBLE; }
			|	<VARSTRING>	{ jjtn000.decl = Declaration.STRING; }
			|	<VARBOOLEAN>{ jjtn000.decl = Declaration.BOOLEAN; }
		)
		t=<IDENT> <LP> [ FunctionVar() ] <RP> { jjtn000.line_num1 = jj_consume_token(SM).beginLine; }/*@bgen(jjtree) Block */
                {
                  ASTBlock jjtn001 = new ASTBlock(JJTBLOCK);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/
		( VarDecl() | Stat() )*/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
                }
/*@egen*/        <ENDFUNCTION>
		|	<PROCEDURAL>	{ jjtn000.decl = Declaration.PROCEDURAL; }
		t=<IDENT> <LP> [ FunctionVar() ] <RP> { jjtn000.line_num1 = jj_consume_token(SM).beginLine; }/*@bgen(jjtree) Block */
                {
                  ASTBlock jjtn002 = new ASTBlock(JJTBLOCK);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*/
		( VarDecl() | Stat() )*/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                  }
                }
/*@egen*/        <ENDPROCEDURAL>
		
	)
	
	{ jjtn000.line_num2 = jj_consume_token(SM).beginLine; }/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{
			jjtn000.varName = str2Half(t.image, t.beginLine);
		}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void FunctionVar() :
{/*@bgen(jjtree) FunctionVar */
  ASTFunctionVar jjtn000 = new ASTFunctionVar(JJTFUNCTIONVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionVar */
        try {
/*@egen*/
	(
		<VARINT>	{ jjtn000.decl = Declaration.INT; }
		| <VARLONG>		{ jjtn000.decl = Declaration.LONG; }
		| <VARDOUBLE>	{ jjtn000.decl = Declaration.DOUBLE; }
		| <VARSTRING>	{ jjtn000.decl = Declaration.STRING; }
		| <VARBOOLEAN>	{ jjtn000.decl = Declaration.BOOLEAN; }
	) Decl() [ <CM> FunctionVar() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void VarDecl() :
{/*@bgen(jjtree) VarDecl */
  ASTVarDecl jjtn000 = new ASTVarDecl(JJTVARDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VarDecl */
        try {
/*@egen*/
	(
		<VARINT>	{ jjtn000.decl = Declaration.INT; }
		| <VARLONG>		{ jjtn000.decl = Declaration.LONG; }
		| <VARDOUBLE>	{ jjtn000.decl = Declaration.DOUBLE; }
		| <VARSTRING>	{ jjtn000.decl = Declaration.STRING; }
		| <VARBOOLEAN>	{ jjtn000.decl = Declaration.BOOLEAN; }
	) Decl() ( <CM> Decl() )*/*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                  }
/*@egen*/ { 
				jjtn000.line_num1 = jj_consume_token(SM).beginLine;
			}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Decl() :
{/*@bgen(jjtree) Decl */
        ASTDecl jjtn000 = new ASTDecl(JJTDECL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/	Token t; }
{/*@bgen(jjtree) Decl */
        try {
/*@egen*/
	t=<IDENT> [ <LD> Array() <RD> ]/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{
			jjtn000.varName = str2Half(t.image, t.beginLine);
		}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Array() :
{/*@bgen(jjtree) Array */
  ASTArray jjtn000 = new ASTArray(JJTARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Array */
        try {
/*@egen*/
	AddExpr() [ <CM> Array() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Stat()       :
{}
{
	LOOKAHEAD(100) PutStat()
	|	LOOKAHEAD(100) Return()
	|	LOOKAHEAD(100) Label()
	|	LOOKAHEAD(100) AssignStats()
	|	LOOKAHEAD(100) FunctionCall()
	|	LOOKAHEAD(100) InputStat()
	|	WhileSwitchFor()
//	|	LOOKAHEAD(2) ForStat()
//	|	LOOKAHEAD(2) Switch()
//	|	LOOKAHEAD(2) WhileStat()
	|	InfiniteLoop()
	|	IfStat()
	|	RepeatUntil()
	|	Break()
//	|	GetStat()
//	|	Block()
	|	gOpenWindow()
	|	gOpenGraphWindow()
	|	gCloseWindow()
	|	gClearWindow()
	|	gSaveWindow()
	|	gSetOrigin()
	|	gSetMap()
	|	gSetFillColor()
	|	gSetLineColor()
	|	gSetTextColor()
	|	gSetFont()
	|	gSetFontType()
	|	gSetFontSize()
	|	gSetDotShape()
	|	gSetArrowDir()
	|	gSetArrowType()
	|	gSetLineShape()
	|	gSetLineWidth()
	|	gDrawPoint()
	|	gDrawLine()
	|	gDrawText()
	|	gDrawCircle()
	|	gFillCircle()
	|	gDrawOval()
	|	gFillOval()
	|	gDrawBox()
	|	gFillBox()
	|	gDrawArc()
	|	gFillArc()
	|	gDrawPolygon()
	|	gFillPolygon()
	|	gDrawPolyline()
	|	gDrawImage()
	|	gSetRepaintFlag()
	|	gRepaint()
	|	File_close()
	|	File_putstr()
	|	File_putline()
	|	File_flush()
	|	File_rename()
	|	File_remove()
	|	Sleep()
	|	<SM>
}

void AssignStats() :
{/*@bgen(jjtree) AssignStats */
  ASTAssignStats jjtn000 = new ASTAssignStats(JJTASSIGNSTATS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AssignStats */
        try {
/*@egen*/
	AssignStat() ( <CM> AssignStat() )*/*@bgen(jjtree)*/
                                            {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
                                            }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void AssignStat() :
{/*@bgen(jjtree) AssignStat */
  ASTAssignStat jjtn000 = new ASTAssignStat(JJTASSIGNSTAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AssignStat */
          try {
/*@egen*/
	  Ident() <ASGNOP> AddExpr()/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

void InputStat()             :
{/*@bgen(jjtree) AssignStat */
  ASTAssignStat jjtn000 = new ASTAssignStat(JJTASSIGNSTAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AssignStat */
        try {
/*@egen*/
	Ident()	<INPUT>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ { jjtn000.InputFlag = true; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IfStat() :
{/*@bgen(jjtree) IfStat */
  ASTIfStat jjtn000 = new ASTIfStat(JJTIFSTAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfStat */
        try {
/*@egen*/
	<IF> Cond() { jjtn000.line_num1 = jj_consume_token(THEN).beginLine; } (/*@bgen(jjtree) Block */
                {
                  ASTBlock jjtn001 = new ASTBlock(JJTBLOCK);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/
		( Stat() )*/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
                }
/*@egen*/       
		[
		 	(
		 		<ELSE> { jjtn000.line_num2 = jj_consume_token(SM).beginLine; }/*@bgen(jjtree) Block */
                                                                                               {
                                                                                                 ASTBlock jjtn002 = new ASTBlock(JJTBLOCK);
                                                                                                 boolean jjtc002 = true;
                                                                                                 jjtree.openNodeScope(jjtn002);
                                                                                               }
                                                                                               try {
/*@egen*/ ( Stat() )*/*@bgen(jjtree)*/
                                                                                               } catch (Throwable jjte002) {
                                                                                                 if (jjtc002) {
                                                                                                   jjtree.clearNodeScope(jjtn002);
                                                                                                   jjtc002 = false;
                                                                                                 } else {
                                                                                                   jjtree.popNode();
                                                                                                 }
                                                                                                 if (jjte002 instanceof RuntimeException) {
                                                                                                   throw (RuntimeException)jjte002;
                                                                                                 }
                                                                                                 if (jjte002 instanceof ParseException) {
                                                                                                   throw (ParseException)jjte002;
                                                                                                 }
                                                                                                 throw (Error)jjte002;
                                                                                               } finally {
                                                                                                 if (jjtc002) {
                                                                                                   jjtree.closeNodeScope(jjtn002, true);
                                                                                                 }
                                                                                               }
/*@egen*/       
		 		| ElseIfStat()
		 	)
		 ]
		 <ENDIF>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ { jjtn000.line_num3 = jj_consume_token(SM).beginLine; }
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ElseIfStat()         :
{/*@bgen(jjtree) IfStat */
  ASTIfStat jjtn000 = new ASTIfStat(JJTIFSTAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfStat */
        try {
/*@egen*/
	<ELSEIF> <IF> Cond() { jjtn000.line_num1 = jj_consume_token(THEN).beginLine; } <SM>/*@bgen(jjtree) Block */
                                                                                            {
                                                                                              ASTBlock jjtn001 = new ASTBlock(JJTBLOCK);
                                                                                              boolean jjtc001 = true;
                                                                                              jjtree.openNodeScope(jjtn001);
                                                                                            }
                                                                                            try {
/*@egen*/ ( Stat() )*/*@bgen(jjtree)*/
                                                                                            } catch (Throwable jjte001) {
                                                                                              if (jjtc001) {
                                                                                                jjtree.clearNodeScope(jjtn001);
                                                                                                jjtc001 = false;
                                                                                              } else {
                                                                                                jjtree.popNode();
                                                                                              }
                                                                                              if (jjte001 instanceof RuntimeException) {
                                                                                                throw (RuntimeException)jjte001;
                                                                                              }
                                                                                              if (jjte001 instanceof ParseException) {
                                                                                                throw (ParseException)jjte001;
                                                                                              }
                                                                                              throw (Error)jjte001;
                                                                                            } finally {
                                                                                              if (jjtc001) {
                                                                                                jjtree.closeNodeScope(jjtn001, true);
                                                                                              }
                                                                                            }
/*@egen*/       
	[
		(
			<ELSE> { jjtn000.line_num2 = jj_consume_token(SM).beginLine; }/*@bgen(jjtree) Block */
                                                                                       {
                                                                                         ASTBlock jjtn002 = new ASTBlock(JJTBLOCK);
                                                                                         boolean jjtc002 = true;
                                                                                         jjtree.openNodeScope(jjtn002);
                                                                                       }
                                                                                       try {
/*@egen*/ ( Stat() )*/*@bgen(jjtree)*/
                                                                                       } catch (Throwable jjte002) {
                                                                                         if (jjtc002) {
                                                                                           jjtree.clearNodeScope(jjtn002);
                                                                                           jjtc002 = false;
                                                                                         } else {
                                                                                           jjtree.popNode();
                                                                                         }
                                                                                         if (jjte002 instanceof RuntimeException) {
                                                                                           throw (RuntimeException)jjte002;
                                                                                         }
                                                                                         if (jjte002 instanceof ParseException) {
                                                                                           throw (ParseException)jjte002;
                                                                                         }
                                                                                         throw (Error)jjte002;
                                                                                       } finally {
                                                                                         if (jjtc002) {
                                                                                           jjtree.closeNodeScope(jjtn002, true);
                                                                                         }
                                                                                       }
/*@egen*/       
			| ElseIfStat()
		)
	]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/		
}

void RepeatUntil() :
{/*@bgen(jjtree) RepeatUntil */
  ASTRepeatUntil jjtn000 = new ASTRepeatUntil(JJTREPEATUNTIL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RepeatUntil */
        try {
/*@egen*/
	<DOWHILE> { jjtn000.line_num1 = jj_consume_token(SM).beginLine; }/*@bgen(jjtree) Block */
                                                                          {
                                                                            ASTBlock jjtn001 = new ASTBlock(JJTBLOCK);
                                                                            boolean jjtc001 = true;
                                                                            jjtree.openNodeScope(jjtn001);
                                                                          }
                                                                          try {
/*@egen*/ ( Stat() )*/*@bgen(jjtree)*/
                                                                          } catch (Throwable jjte001) {
                                                                            if (jjtc001) {
                                                                              jjtree.clearNodeScope(jjtn001);
                                                                              jjtc001 = false;
                                                                            } else {
                                                                              jjtree.popNode();
                                                                            }
                                                                            if (jjte001 instanceof RuntimeException) {
                                                                              throw (RuntimeException)jjte001;
                                                                            }
                                                                            if (jjte001 instanceof ParseException) {
                                                                              throw (ParseException)jjte001;
                                                                            }
                                                                            throw (Error)jjte001;
                                                                          } finally {
                                                                            if (jjtc001) {
                                                                              jjtree.closeNodeScope(jjtn001, true);
                                                                            }
                                                                          }
/*@egen*/       
	<DOWHILE2> Cond() <DOWHILE3>/*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/ { jjtn000.line_num2 = jj_consume_token(SM).beginLine; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ForStatAdd() :
{/*@bgen(jjtree) ForStatAdd */
  ASTForStatAdd jjtn000 = new ASTForStatAdd(JJTFORSTATADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForStatAdd */
        try {
/*@egen*/
	AddExpr() ( <FORADD>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ {jjtn000.op = 1;} | <FORSUB>/*@bgen(jjtree)*/
                                                          {
                                                            jjtree.closeNodeScope(jjtn000, true);
                                                            jjtc000 = false;
                                                          }
/*@egen*/ {jjtn000.op = -1;} )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void WhileSwitchFor() :
{/*@bgen(jjtree) WhileSwitchFor */
  ASTWhileSwitchFor jjtn000 = new ASTWhileSwitchFor(JJTWHILESWITCHFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhileSwitchFor */
        try {
/*@egen*/
	Cond() 
	(
		<WHILE> { jjtn000.line_num1 = jj_consume_token(SM).beginLine; }/*@bgen(jjtree) Block */
                {
                  ASTBlock jjtn001 = new ASTBlock(JJTBLOCK);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/
		( Stat() )*/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
                }
/*@egen*/       
		<ENDLOOP> { jjtn000.line_num2 = jj_consume_token(SM).beginLine; }/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{ jjtn000.p = jjtn000.wh; }
		|	<SWITCH> { jjtn000.line_num1 = jj_consume_token(SM).beginLine; }/*@bgen(jjtree) Case */
                        {
                          ASTCase jjtn002 = new ASTCase(JJTCASE);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
                        }
                        try {
/*@egen*/
			(Stat())*/*@bgen(jjtree)*/
                        } catch (Throwable jjte002) {
                          if (jjtc002) {
                            jjtree.clearNodeScope(jjtn002);
                            jjtc002 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte002 instanceof RuntimeException) {
                            throw (RuntimeException)jjte002;
                          }
                          if (jjte002 instanceof ParseException) {
                            throw (ParseException)jjte002;
                          }
                          throw (Error)jjte002;
                        } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, true);
                          }
                        }
/*@egen*/      
			<ENDSWITCH> { jjtn000.line_num2 = jj_consume_token(SM).beginLine; }/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/
			{ jjtn000.p = jjtn000.sw; }
		|	<FOR> AddExpr() <FOR2> AddExpr() <FOR3> ForStatAdd() { jjtn000.line_num1 = jj_consume_token(SM).beginLine; }/*@bgen(jjtree) Block */
                        {
                          ASTBlock jjtn003 = new ASTBlock(JJTBLOCK);
                          boolean jjtc003 = true;
                          jjtree.openNodeScope(jjtn003);
                        }
                        try {
/*@egen*/
			(Stat())*/*@bgen(jjtree)*/
                        } catch (Throwable jjte003) {
                          if (jjtc003) {
                            jjtree.clearNodeScope(jjtn003);
                            jjtc003 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte003 instanceof RuntimeException) {
                            throw (RuntimeException)jjte003;
                          }
                          if (jjte003 instanceof ParseException) {
                            throw (ParseException)jjte003;
                          }
                          throw (Error)jjte003;
                        } finally {
                          if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003, true);
                          }
                        }
/*@egen*/        <ENDLOOP> { jjtn000.line_num2 = jj_consume_token(SM).beginLine; }/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/
			{ jjtn000.p = jjtn000.fr; }
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void InfiniteLoop() :
{/*@bgen(jjtree) InfiniteLoop */
  ASTInfiniteLoop jjtn000 = new ASTInfiniteLoop(JJTINFINITELOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InfiniteLoop */
        try {
/*@egen*/
	<INFINITE> { jjtn000.line_num1 = jj_consume_token(SM).beginLine; }/*@bgen(jjtree) Block */
        {
          ASTBlock jjtn001 = new ASTBlock(JJTBLOCK);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	( Stat() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/       
	<ENDLOOP>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ { jjtn000.line_num2 = jj_consume_token(SM).beginLine; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void Label() :
{/*@bgen(jjtree) Label */
  ASTLabel jjtn000 = new ASTLabel(JJTLABEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Label */
        try {
/*@egen*/
	AddExpr() <CASE>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ { jjtn000.line_num1 = jj_consume_token(SM).beginLine; }
	| <CASEDEFAULT>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ { jjtn000.line_num1 = jj_consume_token(SM).beginLine; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void GetStat() :
{/*@bgen(jjtree) GetStat */
  ASTGetStat jjtn000 = new ASTGetStat(JJTGETSTAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) GetStat */
        try {
/*@egen*/
	<GET> <LP> Ident() <RP>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/ { jjtn000.line_num1 = jj_consume_token(SM).beginLine; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PutStat() :
{/*@bgen(jjtree) PutStat */
  ASTPutStat jjtn000 = new ASTPutStat(JJTPUTSTAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PutStat */
        try {
/*@egen*/
	PutParam() ( <CM2> PutParam() )* ( <PUT> | <PUTLN> {jjtn000.n = "\n";} )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ jjtn000.line_num1 = jj_consume_token(SM).beginLine; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PutParam()       :
{}
{
	AddExpr()
//	|	Strlit()
}

void Block() :
{/*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Block */
        try {
/*@egen*/
	<LC> ( Stat() )* <RC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Cond()       :
{}
{
	ORExpr()
}

void ORExpr()       :
{}
{
	AndExpr() [ <OROP>/*@bgen(jjtree) #ORNode( 2) */
                           {
                             ASTORNode jjtn001 = new ASTORNode(JJTORNODE);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
                           }
                           try {
/*@egen*/ ORExpr()/*@bgen(jjtree)*/
                           } catch (Throwable jjte001) {
                             if (jjtc001) {
                               jjtree.clearNodeScope(jjtn001);
                               jjtc001 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte001 instanceof RuntimeException) {
                               throw (RuntimeException)jjte001;
                             }
                             if (jjte001 instanceof ParseException) {
                               throw (ParseException)jjte001;
                             }
                             throw (Error)jjte001;
                           } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001,  2);
                             }
                           }
/*@egen*/            ]
}

void AndExpr()       :
{}
{
	NotExpr() [ <ANDOP>/*@bgen(jjtree) #ANDNode( 2) */
                            {
                              ASTANDNode jjtn001 = new ASTANDNode(JJTANDNODE);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                            }
                            try {
/*@egen*/ AndExpr()/*@bgen(jjtree)*/
                            } catch (Throwable jjte001) {
                              if (jjtc001) {
                                jjtree.clearNodeScope(jjtn001);
                                jjtc001 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte001 instanceof RuntimeException) {
                                throw (RuntimeException)jjte001;
                              }
                              if (jjte001 instanceof ParseException) {
                                throw (ParseException)jjte001;
                              }
                              throw (Error)jjte001;
                            } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  2);
                              }
                            }
/*@egen*/             ]
}

void NotExpr()       :
{}
{
 	LOOKAHEAD(100) CompareExpr() [/*@bgen(jjtree) #NOTNode( 1) */
                                       {
                                         ASTNOTNode jjtn001 = new ASTNOTNode(JJTNOTNODE);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
                                       }
                                       try {
/*@egen*/ <NOTOP>/*@bgen(jjtree)*/
                                       } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001,  1);
                                         }
                                       }
/*@egen*/             ]
	|	LOOKAHEAD(100) <LP> Cond() <RP> [/*@bgen(jjtree) #NOTNode( 1) */
                                                  {
                                                    ASTNOTNode jjtn002 = new ASTNOTNode(JJTNOTNODE);
                                                    boolean jjtc002 = true;
                                                    jjtree.openNodeScope(jjtn002);
                                                  }
                                                  try {
/*@egen*/ <NOTOP>/*@bgen(jjtree)*/
                                                  } finally {
                                                    if (jjtc002) {
                                                      jjtree.closeNodeScope(jjtn002,  1);
                                                    }
                                                  }
/*@egen*/             ]
}

void CompareExpr()       :
{}
{
	AddExpr()
	[
		<EQOP>/*@bgen(jjtree) #EQNode( 2) */
                       {
                         ASTEQNode jjtn001 = new ASTEQNode(JJTEQNODE);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                       }
                       try {
/*@egen*/ AddExpr()/*@bgen(jjtree)*/
                       } catch (Throwable jjte001) {
                         if (jjtc001) {
                           jjtree.clearNodeScope(jjtn001);
                           jjtc001 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte001 instanceof RuntimeException) {
                           throw (RuntimeException)jjte001;
                         }
                         if (jjte001 instanceof ParseException) {
                           throw (ParseException)jjte001;
                         }
                         throw (Error)jjte001;
                       } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001,  2);
                         }
                       }
/*@egen*/           
		|	<NTOP>/*@bgen(jjtree) #NTNode( 2) */
                               {
                                 ASTNTNode jjtn002 = new ASTNTNode(JJTNTNODE);
                                 boolean jjtc002 = true;
                                 jjtree.openNodeScope(jjtn002);
                               }
                               try {
/*@egen*/ AddExpr()/*@bgen(jjtree)*/
                               } catch (Throwable jjte002) {
                                 if (jjtc002) {
                                   jjtree.clearNodeScope(jjtn002);
                                   jjtc002 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte002 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte002;
                                 }
                                 if (jjte002 instanceof ParseException) {
                                   throw (ParseException)jjte002;
                                 }
                                 throw (Error)jjte002;
                               } finally {
                                 if (jjtc002) {
                                   jjtree.closeNodeScope(jjtn002,  2);
                                 }
                               }
/*@egen*/           
		| 	<LSOP>/*@bgen(jjtree) #LSNode( 2) */
                               {
                                 ASTLSNode jjtn003 = new ASTLSNode(JJTLSNODE);
                                 boolean jjtc003 = true;
                                 jjtree.openNodeScope(jjtn003);
                               }
                               try {
/*@egen*/ AddExpr()/*@bgen(jjtree)*/
                               } catch (Throwable jjte003) {
                                 if (jjtc003) {
                                   jjtree.clearNodeScope(jjtn003);
                                   jjtc003 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte003 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte003;
                                 }
                                 if (jjte003 instanceof ParseException) {
                                   throw (ParseException)jjte003;
                                 }
                                 throw (Error)jjte003;
                               } finally {
                                 if (jjtc003) {
                                   jjtree.closeNodeScope(jjtn003,  2);
                                 }
                               }
/*@egen*/           
		|	<GTOP>/*@bgen(jjtree) #GTNode( 2) */
                               {
                                 ASTGTNode jjtn004 = new ASTGTNode(JJTGTNODE);
                                 boolean jjtc004 = true;
                                 jjtree.openNodeScope(jjtn004);
                               }
                               try {
/*@egen*/ AddExpr()/*@bgen(jjtree)*/
                               } catch (Throwable jjte004) {
                                 if (jjtc004) {
                                   jjtree.clearNodeScope(jjtn004);
                                   jjtc004 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte004 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte004;
                                 }
                                 if (jjte004 instanceof ParseException) {
                                   throw (ParseException)jjte004;
                                 }
                                 throw (Error)jjte004;
                               } finally {
                                 if (jjtc004) {
                                   jjtree.closeNodeScope(jjtn004,  2);
                                 }
                               }
/*@egen*/           
		|	<LEOP>/*@bgen(jjtree) #LENode( 2) */
                               {
                                 ASTLENode jjtn005 = new ASTLENode(JJTLENODE);
                                 boolean jjtc005 = true;
                                 jjtree.openNodeScope(jjtn005);
                               }
                               try {
/*@egen*/ AddExpr()/*@bgen(jjtree)*/
                               } catch (Throwable jjte005) {
                                 if (jjtc005) {
                                   jjtree.clearNodeScope(jjtn005);
                                   jjtc005 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte005 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte005;
                                 }
                                 if (jjte005 instanceof ParseException) {
                                   throw (ParseException)jjte005;
                                 }
                                 throw (Error)jjte005;
                               } finally {
                                 if (jjtc005) {
                                   jjtree.closeNodeScope(jjtn005,  2);
                                 }
                               }
/*@egen*/           
		|	<GEOP>/*@bgen(jjtree) #GENode( 2) */
                               {
                                 ASTGENode jjtn006 = new ASTGENode(JJTGENODE);
                                 boolean jjtc006 = true;
                                 jjtree.openNodeScope(jjtn006);
                               }
                               try {
/*@egen*/ AddExpr()/*@bgen(jjtree)*/
                               } catch (Throwable jjte006) {
                                 if (jjtc006) {
                                   jjtree.clearNodeScope(jjtn006);
                                   jjtc006 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte006 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte006;
                                 }
                                 if (jjte006 instanceof ParseException) {
                                   throw (ParseException)jjte006;
                                 }
                                 throw (Error)jjte006;
                               } finally {
                                 if (jjtc006) {
                                   jjtree.closeNodeScope(jjtn006,  2);
                                 }
                               }
/*@egen*/           
	]
}

void AddExpr()       :
{}
{
	MulExpr()
	(
		LOOKAHEAD(2) (
				<ADDOP>/*@bgen(jjtree) #AddNode( 2) */
                                        {
                                          ASTAddNode jjtn001 = new ASTAddNode(JJTADDNODE);
                                          boolean jjtc001 = true;
                                          jjtree.openNodeScope(jjtn001);
                                        }
                                        try {
/*@egen*/ MulExpr()/*@bgen(jjtree)*/
                                        } catch (Throwable jjte001) {
                                          if (jjtc001) {
                                            jjtree.clearNodeScope(jjtn001);
                                            jjtc001 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte001 instanceof RuntimeException) {
                                            throw (RuntimeException)jjte001;
                                          }
                                          if (jjte001 instanceof ParseException) {
                                            throw (ParseException)jjte001;
                                          }
                                          throw (Error)jjte001;
                                        } finally {
                                          if (jjtc001) {
                                            jjtree.closeNodeScope(jjtn001,  2);
                                          }
                                        }
/*@egen*/            
			|	<SUBOP>/*@bgen(jjtree) #SubNode( 2) */
                                        {
                                          ASTSubNode jjtn002 = new ASTSubNode(JJTSUBNODE);
                                          boolean jjtc002 = true;
                                          jjtree.openNodeScope(jjtn002);
                                        }
                                        try {
/*@egen*/ MulExpr()/*@bgen(jjtree)*/
                                        } catch (Throwable jjte002) {
                                          if (jjtc002) {
                                            jjtree.clearNodeScope(jjtn002);
                                            jjtc002 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte002 instanceof RuntimeException) {
                                            throw (RuntimeException)jjte002;
                                          }
                                          if (jjte002 instanceof ParseException) {
                                            throw (ParseException)jjte002;
                                          }
                                          throw (Error)jjte002;
                                        } finally {
                                          if (jjtc002) {
                                            jjtree.closeNodeScope(jjtn002,  2);
                                          }
                                        }
/*@egen*/            
		)
	)*
}

void MulExpr()       :
{}
{
	UnExpr()
	(
		<MULOP>/*@bgen(jjtree) #MulNode( 2) */
                        {
                          ASTMulNode jjtn001 = new ASTMulNode(JJTMULNODE);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
                        }
                        try {
/*@egen*/ UnExpr()/*@bgen(jjtree)*/
                        } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            throw (RuntimeException)jjte001;
                          }
                          if (jjte001 instanceof ParseException) {
                            throw (ParseException)jjte001;
                          }
                          throw (Error)jjte001;
                        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  2);
                          }
                        }
/*@egen*/            
		|	<DIVOP> UnExpr()/*@bgen(jjtree) #DivNode( 2) */
                                         {
                                           ASTDivNode jjtn002 = new ASTDivNode(JJTDIVNODE);
                                           boolean jjtc002 = true;
                                           jjtree.openNodeScope(jjtn002);
                                         }
                                         try {
/*@egen*//*@bgen(jjtree)*/
                                         {
                                           jjtree.closeNodeScope(jjtn002,  2);
                                           jjtc002 = false;
                                         }
/*@egen*/ { jjtn002.DivFlag=true; }/*@bgen(jjtree)*/
                                         } finally {
                                           if (jjtc002) {
                                             jjtree.closeNodeScope(jjtn002,  2);
                                           }
                                         }
/*@egen*/            
		|	<DIVOP2>/*@bgen(jjtree) #DivNode( 2) */
                                 {
                                   ASTDivNode jjtn003 = new ASTDivNode(JJTDIVNODE);
                                   boolean jjtc003 = true;
                                   jjtree.openNodeScope(jjtn003);
                                 }
                                 try {
/*@egen*/ UnExpr()/*@bgen(jjtree)*/
                                 } catch (Throwable jjte003) {
                                   if (jjtc003) {
                                     jjtree.clearNodeScope(jjtn003);
                                     jjtc003 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte003 instanceof RuntimeException) {
                                     throw (RuntimeException)jjte003;
                                   }
                                   if (jjte003 instanceof ParseException) {
                                     throw (ParseException)jjte003;
                                   }
                                   throw (Error)jjte003;
                                 } finally {
                                   if (jjtc003) {
                                     jjtree.closeNodeScope(jjtn003,  2);
                                   }
                                 }
/*@egen*/           
		|	<SUROP>/*@bgen(jjtree) #SurNode( 2) */
                                {
                                  ASTSurNode jjtn004 = new ASTSurNode(JJTSURNODE);
                                  boolean jjtc004 = true;
                                  jjtree.openNodeScope(jjtn004);
                                }
                                try {
/*@egen*/ UnExpr()/*@bgen(jjtree)*/
                                } catch (Throwable jjte004) {
                                  if (jjtc004) {
                                    jjtree.clearNodeScope(jjtn004);
                                    jjtc004 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte004 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte004;
                                  }
                                  if (jjte004 instanceof ParseException) {
                                    throw (ParseException)jjte004;
                                  }
                                  throw (Error)jjte004;
                                } finally {
                                  if (jjtc004) {
                                    jjtree.closeNodeScope(jjtn004,  2);
                                  }
                                }
/*@egen*/            
	)*
}

void UnExpr()       :
{}
{
	PrimExpr()
	|	<SUBOP>/*@bgen(jjtree) #MinNode( 1) */
                        {
                          ASTMinNode jjtn001 = new ASTMinNode(JJTMINNODE);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
                        }
                        try {
/*@egen*/ PrimExpr()/*@bgen(jjtree)*/
                        } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            throw (RuntimeException)jjte001;
                          }
                          if (jjte001 instanceof ParseException) {
                            throw (ParseException)jjte001;
                          }
                          throw (Error)jjte001;
                        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  1);
                          }
                        }
/*@egen*/            
}

void PrimExpr()       :
{}
{
	Literal()
	|	FloatLiteral()
	|	True()
	|	False()
	|	Strlit()
	|	EXTRA_STR()
	|	FunctionExpr()
	|	Ident()
//	|	FunctionCall()
	|	<LP> AddExpr() <RP>
}

void FunctionExpr()       :
{}
{
	Get()
	|	Random()
	|	Sine()
	|	Cosine()
	|	Tangent()
	|	Sqrt()
	|	Floor()
	|	Ceil()
	|	Round()
	|	Abs()
	|	Log()
	|	Int()
	|	Long()
	|	Length()
	|	Append()
	|	Substring()
	|	Insert()
	|	Replace()
	|	Extract()
	|	Str2Int()
	|	Int2Str()
	|	Compare()
	|	File_openr()
	|	File_openw()
	|	File_opena()
	|	File_getstr()
	|	File_getline()
	|	File_isfile()
}

void Get() :
{/*@bgen(jjtree) Get */
  ASTGet jjtn000 = new ASTGet(JJTGET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Get */
        try {
/*@egen*/
	<GET> <RP>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Random() :
{/*@bgen(jjtree) Random */
  ASTRandom jjtn000 = new ASTRandom(JJTRANDOM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Random */
        try {
/*@egen*/
	<RANDOM>AddExpr() <RP>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Sine() :
{/*@bgen(jjtree) Sine */
  ASTSine jjtn000 = new ASTSine(JJTSINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Sine */
        try {
/*@egen*/
	<SIN>	AddExpr() <RP>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Cosine() :
{/*@bgen(jjtree) Cosine */
  ASTCosine jjtn000 = new ASTCosine(JJTCOSINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Cosine */
        try {
/*@egen*/
	<COS>	AddExpr() <RP>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Tangent() :
{/*@bgen(jjtree) Tangent */
  ASTTangent jjtn000 = new ASTTangent(JJTTANGENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Tangent */
        try {
/*@egen*/
	<TAN>	AddExpr() <RP>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Sqrt() :
{/*@bgen(jjtree) Sqrt */
  ASTSqrt jjtn000 = new ASTSqrt(JJTSQRT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Sqrt */
        try {
/*@egen*/
	<SQRT>	AddExpr() <RP>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Floor() :
{/*@bgen(jjtree) Floor */
  ASTFloor jjtn000 = new ASTFloor(JJTFLOOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Floor */
        try {
/*@egen*/
	<FLOOR>	AddExpr() <RP>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Ceil() :
{/*@bgen(jjtree) Ceil */
  ASTCeil jjtn000 = new ASTCeil(JJTCEIL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Ceil */
        try {
/*@egen*/
	<CEIL>	AddExpr() <RP>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Round() :
{/*@bgen(jjtree) Round */
  ASTRound jjtn000 = new ASTRound(JJTROUND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Round */
        try {
/*@egen*/
	<ROUND>	AddExpr() <RP>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Abs() :
{/*@bgen(jjtree) Abs */
  ASTAbs jjtn000 = new ASTAbs(JJTABS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Abs */
        try {
/*@egen*/
	<ABS>	AddExpr() <RP>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Log() :
{/*@bgen(jjtree) Log */
  ASTLog jjtn000 = new ASTLog(JJTLOG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Log */
        try {
/*@egen*/
	<LOG>	AddExpr() <RP>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Int() :
{/*@bgen(jjtree) Int */
  ASTInt jjtn000 = new ASTInt(JJTINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Int */
        try {
/*@egen*/
	<INT>	AddExpr() <RP>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Long() :
{/*@bgen(jjtree) Long */
  ASTLong jjtn000 = new ASTLong(JJTLONG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Long */
        try {
/*@egen*/
	<LONG>	AddExpr() <RP>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Length() :
{/*@bgen(jjtree) Length */
  ASTLength jjtn000 = new ASTLength(JJTLENGTH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Length */
        try {
/*@egen*/
	<LENGTH>AddExpr() <RP>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Append() :
{/*@bgen(jjtree) Append */
  ASTAppend jjtn000 = new ASTAppend(JJTAPPEND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Append */
        try {
/*@egen*/
	<APPEND> AddExpr() <CM> AddExpr() <RP>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Substring() :
{/*@bgen(jjtree) Substring */
  ASTSubstring jjtn000 = new ASTSubstring(JJTSUBSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Substring */
        try {
/*@egen*/
	<SUBSTRING> AddExpr() <CM> AddExpr() [ <CM> AddExpr() ] <RP>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Insert() :
{/*@bgen(jjtree) Insert */
  ASTInsert jjtn000 = new ASTInsert(JJTINSERT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Insert */
        try {
/*@egen*/
	<INSERT> AddExpr() <CM> AddExpr() <CM> AddExpr() <RP>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Replace() :
{/*@bgen(jjtree) Replace */
  ASTReplace jjtn000 = new ASTReplace(JJTREPLACE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Replace */
        try {
/*@egen*/
	<REPLACE> AddExpr() <CM> AddExpr() <CM> AddExpr() <CM> AddExpr() <RP>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Extract() :
{/*@bgen(jjtree) Extract */
  ASTExtract jjtn000 = new ASTExtract(JJTEXTRACT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Extract */
        try {
/*@egen*/
	<EXTRACT> AddExpr() <CM> AddExpr() <CM> AddExpr() <RP>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Str2Int() :
{/*@bgen(jjtree) Str2Int */
  ASTStr2Int jjtn000 = new ASTStr2Int(JJTSTR2INT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Str2Int */
        try {
/*@egen*/
	<Str2Int> AddExpr() <RP>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Int2Str() :
{/*@bgen(jjtree) Int2Str */
  ASTInt2Str jjtn000 = new ASTInt2Str(JJTINT2STR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Int2Str */
        try {
/*@egen*/
	<Int2Str> AddExpr() <RP>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Compare() :
{/*@bgen(jjtree) Compare */
  ASTCompare jjtn000 = new ASTCompare(JJTCOMPARE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Compare */
        try {
/*@egen*/
	<Compare> AddExpr() <CM> AddExpr() <RP>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void gOpenWindow() :
{/*@bgen(jjtree) gOpenWindow */
  ASTgOpenWindow jjtn000 = new ASTgOpenWindow(JJTGOPENWINDOW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) gOpenWindow */
        try {
/*@egen*/
	<gOpenWindow> AddExpr() <CM> AddExpr() [ <CM> AddExpr() <CM> AddExpr() ] <RP>/*@bgen(jjtree)*/
                                                                                      {
                                                                                        jjtree.closeNodeScope(jjtn000, true);
                                                                                        jjtc000 = false;
                                                                                      }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void gOpenGraphWindow() :
{/*@bgen(jjtree) gOpenGraphWindow */
  ASTgOpenGraphWindow jjtn000 = new ASTgOpenGraphWindow(JJTGOPENGRAPHWINDOW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) gOpenGraphWindow */
        try {
/*@egen*/
	<gOpenGWindow> AddExpr() <CM> AddExpr() <CM> AddExpr() <CM> AddExpr() <CM> AddExpr() <CM> AddExpr() [ <CM> AddExpr() ]<RP>/*@bgen(jjtree)*/
                                                                                                                                   {
                                                                                                                                     jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                     jjtc000 = false;
                                                                                                                                   }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void gCloseWindow() :
{/*@bgen(jjtree) gCloseWindow */
  ASTgCloseWindow jjtn000 = new ASTgCloseWindow(JJTGCLOSEWINDOW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) gCloseWindow */
        try {
/*@egen*/
	<gCloseWindow> <RP>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void gClearWindow() :
{/*@bgen(jjtree) gClearWindow */
  ASTgClearWindow jjtn000 = new ASTgClearWindow(JJTGCLEARWINDOW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) gClearWindow */
        try {
/*@egen*/
	<gClearWindow> <RP>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void gSaveWindow() :
{/*@bgen(jjtree) gSaveWindow */
  ASTgSaveWindow jjtn000 = new ASTgSaveWindow(JJTGSAVEWINDOW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) gSaveWindow */
        try {
/*@egen*/
	<gSaveWindow> AddExpr() <CM> AddExpr() <RP>/*@bgen(jjtree)*/
                                                    {
                                                      jjtree.closeNodeScope(jjtn000, true);
                                                      jjtc000 = false;
                                                    }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void gSetOrigin() :
{/*@bgen(jjtree) gSetOrigin */
  ASTgSetOrigin jjtn000 = new ASTgSetOrigin(JJTGSETORIGIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) gSetOrigin */
        try {
/*@egen*/
	<gSetOrigin> AddExpr() <CM> AddExpr() <RP>/*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                   }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void gSetMap() :
{/*@bgen(jjtree) gSetMap */
  ASTgSetMap jjtn000 = new ASTgSetMap(JJTGSETMAP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) gSetMap */
        try {
/*@egen*/
	<gSetMap> AddExpr() <CM> AddExpr() <CM> AddExpr() <CM> AddExpr() <RP>/*@bgen(jjtree)*/
                                                                              {
                                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                                jjtc000 = false;
                                                                              }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void gSetFillColor() :
{/*@bgen(jjtree) gSetFillColor */
  ASTgSetFillColor jjtn000 = new ASTgSetFillColor(JJTGSETFILLCOLOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) gSetFillColor */
        try {
/*@egen*/
	<gSetFillColor> AddExpr() <CM> AddExpr() <CM> AddExpr() <RP>/*@bgen(jjtree)*/
                                                                     {
                                                                       jjtree.closeNodeScope(jjtn000, true);
                                                                       jjtc000 = false;
                                                                     }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void gSetLineColor() :
{/*@bgen(jjtree) gSetLineColor */
  ASTgSetLineColor jjtn000 = new ASTgSetLineColor(JJTGSETLINECOLOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) gSetLineColor */
        try {
/*@egen*/
	<gSetLineColor> AddExpr() <CM> AddExpr() <CM> AddExpr() <RP>/*@bgen(jjtree)*/
                                                                     {
                                                                       jjtree.closeNodeScope(jjtn000, true);
                                                                       jjtc000 = false;
                                                                     }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void gSetTextColor() :
{/*@bgen(jjtree) gSetTextColor */
  ASTgSetTextColor jjtn000 = new ASTgSetTextColor(JJTGSETTEXTCOLOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) gSetTextColor */
        try {
/*@egen*/
	<gSetTextColor> AddExpr() <CM> AddExpr() <CM> AddExpr() <RP>/*@bgen(jjtree)*/
                                                                     {
                                                                       jjtree.closeNodeScope(jjtn000, true);
                                                                       jjtc000 = false;
                                                                     }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void gSetFont() :
{/*@bgen(jjtree) gSetFont */
  ASTgSetFont jjtn000 = new ASTgSetFont(JJTGSETFONT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) gSetFont */
        try {
/*@egen*/
	<gSetFont> AddExpr() <RP>/*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                  }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void gSetFontType() :
{/*@bgen(jjtree) gSetFontType */
  ASTgSetFontType jjtn000 = new ASTgSetFontType(JJTGSETFONTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) gSetFontType */
        try {
/*@egen*/
	<gSetFontType> AddExpr() <RP>/*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
                                      }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void gSetFontSize() :
{/*@bgen(jjtree) gSetFontSize */
  ASTgSetFontSize jjtn000 = new ASTgSetFontSize(JJTGSETFONTSIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) gSetFontSize */
        try {
/*@egen*/
	<gSetFontSize> AddExpr() <RP>/*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
                                      }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void gSetDotShape() :
{/*@bgen(jjtree) gSetDotShape */
  ASTgSetDotShape jjtn000 = new ASTgSetDotShape(JJTGSETDOTSHAPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) gSetDotShape */
        try {
/*@egen*/
	<gSetDotShape> AddExpr() <RP>/*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
                                      }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void gSetArrowDir() :
{/*@bgen(jjtree) gSetArrowDir */
  ASTgSetArrowDir jjtn000 = new ASTgSetArrowDir(JJTGSETARROWDIR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) gSetArrowDir */
        try {
/*@egen*/
	<gSetArrowDir> AddExpr() <RP>/*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
                                      }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void gSetArrowType() :
{/*@bgen(jjtree) gSetArrowType */
  ASTgSetArrowType jjtn000 = new ASTgSetArrowType(JJTGSETARROWTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) gSetArrowType */
        try {
/*@egen*/
	<gSetArrowType> AddExpr() [ <CM> AddExpr() ] <RP>/*@bgen(jjtree)*/
                                                          {
                                                            jjtree.closeNodeScope(jjtn000, true);
                                                            jjtc000 = false;
                                                          }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void gSetLineShape() :
{/*@bgen(jjtree) gSetLineShape */
  ASTgSetLineShape jjtn000 = new ASTgSetLineShape(JJTGSETLINESHAPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) gSetLineShape */
        try {
/*@egen*/
	<gSetLineShape> AddExpr() [ <CM> AddExpr() ] <RP>/*@bgen(jjtree)*/
                                                          {
                                                            jjtree.closeNodeScope(jjtn000, true);
                                                            jjtc000 = false;
                                                          }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void gSetLineWidth() :
{/*@bgen(jjtree) gSetLineWidth */
  ASTgSetLineWidth jjtn000 = new ASTgSetLineWidth(JJTGSETLINEWIDTH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) gSetLineWidth */
        try {
/*@egen*/
	<gSetLineWidth> AddExpr() <RP>/*@bgen(jjtree)*/
                                       {
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                       }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void gDrawPoint() :
{/*@bgen(jjtree) gDrawPoint */
  ASTgDrawPoint jjtn000 = new ASTgDrawPoint(JJTGDRAWPOINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) gDrawPoint */
        try {
/*@egen*/
	<gDrawPoint> AddExpr() <CM> AddExpr() <RP>/*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                   }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void gDrawLine() :
{/*@bgen(jjtree) gDrawLine */
  ASTgDrawLine jjtn000 = new ASTgDrawLine(JJTGDRAWLINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) gDrawLine */
        try {
/*@egen*/
	<gDrawLine> AddExpr() <CM> AddExpr() <CM> AddExpr() <CM> AddExpr() <RP>/*@bgen(jjtree)*/
                                                                                {
                                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                                  jjtc000 = false;
                                                                                }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void gDrawText() :
{/*@bgen(jjtree) gDrawText */
  ASTgDrawText jjtn000 = new ASTgDrawText(JJTGDRAWTEXT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) gDrawText */
        try {
/*@egen*/
	<gDrawText> AddExpr() <CM> AddExpr() <CM> AddExpr() <RP>/*@bgen(jjtree)*/
                                                                 {
                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                   jjtc000 = false;
                                                                 }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void gDrawCircle() :
{/*@bgen(jjtree) gDrawCircle */
  ASTgDrawCircle jjtn000 = new ASTgDrawCircle(JJTGDRAWCIRCLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) gDrawCircle */
        try {
/*@egen*/
	<gDrawCircle> AddExpr() <CM> AddExpr() <CM> AddExpr() <RP>/*@bgen(jjtree)*/
                                                                   {
                                                                     jjtree.closeNodeScope(jjtn000, true);
                                                                     jjtc000 = false;
                                                                   }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void gFillCircle() :
{/*@bgen(jjtree) gFillCircle */
  ASTgFillCircle jjtn000 = new ASTgFillCircle(JJTGFILLCIRCLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) gFillCircle */
        try {
/*@egen*/
	<gFillCircle> AddExpr() <CM> AddExpr() <CM> AddExpr() <RP>/*@bgen(jjtree)*/
                                                                   {
                                                                     jjtree.closeNodeScope(jjtn000, true);
                                                                     jjtc000 = false;
                                                                   }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void gDrawOval() :
{/*@bgen(jjtree) gDrawOval */
  ASTgDrawOval jjtn000 = new ASTgDrawOval(JJTGDRAWOVAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) gDrawOval */
        try {
/*@egen*/
	<gDrawOval> AddExpr() <CM> AddExpr() <CM> AddExpr() <CM> AddExpr() <RP>/*@bgen(jjtree)*/
                                                                                {
                                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                                  jjtc000 = false;
                                                                                }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void gFillOval() :
{/*@bgen(jjtree) gFillOval */
  ASTgFillOval jjtn000 = new ASTgFillOval(JJTGFILLOVAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) gFillOval */
        try {
/*@egen*/
	<gFillOval> AddExpr() <CM> AddExpr() <CM> AddExpr() <CM> AddExpr() <RP>/*@bgen(jjtree)*/
                                                                                {
                                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                                  jjtc000 = false;
                                                                                }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void gDrawBox() :
{/*@bgen(jjtree) gDrawBox */
  ASTgDrawBox jjtn000 = new ASTgDrawBox(JJTGDRAWBOX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) gDrawBox */
        try {
/*@egen*/
	<gDrawBox> AddExpr() <CM> AddExpr() <CM> AddExpr() <CM> AddExpr() <RP>/*@bgen(jjtree)*/
                                                                               {
                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                 jjtc000 = false;
                                                                               }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void gFillBox() :
{/*@bgen(jjtree) gFillBox */
  ASTgFillBox jjtn000 = new ASTgFillBox(JJTGFILLBOX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) gFillBox */
        try {
/*@egen*/
	<gFillBox> AddExpr() <CM> AddExpr() <CM> AddExpr() <CM> AddExpr() <RP>/*@bgen(jjtree)*/
                                                                               {
                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                 jjtc000 = false;
                                                                               }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void gDrawArc() :
{/*@bgen(jjtree) gDrawArc */
  ASTgDrawArc jjtn000 = new ASTgDrawArc(JJTGDRAWARC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) gDrawArc */
        try {
/*@egen*/
	<gDrawArc> AddExpr() <CM> AddExpr() <CM> AddExpr() <CM> AddExpr() <CM> AddExpr() <CM> AddExpr() <CM> AddExpr() <RP>/*@bgen(jjtree)*/
                                                                                                                            {
                                                                                                                              jjtree.closeNodeScope(jjtn000, true);
                                                                                                                              jjtc000 = false;
                                                                                                                            }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void gFillArc() :
{/*@bgen(jjtree) gFillArc */
  ASTgFillArc jjtn000 = new ASTgFillArc(JJTGFILLARC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) gFillArc */
        try {
/*@egen*/
	<gFillArc> AddExpr() <CM> AddExpr() <CM> AddExpr() <CM> AddExpr() <CM> AddExpr() <CM> AddExpr() <CM> AddExpr() <RP>/*@bgen(jjtree)*/
                                                                                                                            {
                                                                                                                              jjtree.closeNodeScope(jjtn000, true);
                                                                                                                              jjtc000 = false;
                                                                                                                            }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void gDrawPolygon() :
{/*@bgen(jjtree) gDrawPolygon */
  ASTgDrawPolygon jjtn000 = new ASTgDrawPolygon(JJTGDRAWPOLYGON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) gDrawPolygon */
        try {
/*@egen*/
	<gDrawPolygon> AddExpr() <CM> AddExpr() <CM> AddExpr() <RP>/*@bgen(jjtree)*/
                                                                    {
                                                                      jjtree.closeNodeScope(jjtn000, true);
                                                                      jjtc000 = false;
                                                                    }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void gFillPolygon() :
{/*@bgen(jjtree) gFillPolygon */
  ASTgFillPolygon jjtn000 = new ASTgFillPolygon(JJTGFILLPOLYGON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) gFillPolygon */
        try {
/*@egen*/
	<gFillPolygon> AddExpr() <CM> AddExpr() <CM> AddExpr() <RP>/*@bgen(jjtree)*/
                                                                    {
                                                                      jjtree.closeNodeScope(jjtn000, true);
                                                                      jjtc000 = false;
                                                                    }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void gDrawPolyline() :
{/*@bgen(jjtree) gDrawPolyline */
  ASTgDrawPolyline jjtn000 = new ASTgDrawPolyline(JJTGDRAWPOLYLINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) gDrawPolyline */
        try {
/*@egen*/
	<gDrawPolyline> AddExpr() <CM> AddExpr() <CM> AddExpr() <RP>/*@bgen(jjtree)*/
                                                                     {
                                                                       jjtree.closeNodeScope(jjtn000, true);
                                                                       jjtc000 = false;
                                                                     }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void gDrawImage() :
{/*@bgen(jjtree) gDrawImage */
  ASTgDrawImage jjtn000 = new ASTgDrawImage(JJTGDRAWIMAGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) gDrawImage */
        try {
/*@egen*/
	<gDrawImage> AddExpr() <CM> AddExpr() <CM> AddExpr() [ <CM> AddExpr() <CM> AddExpr() ] <RP>/*@bgen(jjtree)*/
                                                                                                    {
                                                                                                      jjtree.closeNodeScope(jjtn000, true);
                                                                                                      jjtc000 = false;
                                                                                                    }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void gSetRepaintFlag() :
{/*@bgen(jjtree) gSetRepaintFlag */
  ASTgSetRepaintFlag jjtn000 = new ASTgSetRepaintFlag(JJTGSETREPAINTFLAG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) gSetRepaintFlag */
        try {
/*@egen*/
	<gSetRepaintFlag> AddExpr() <RP>/*@bgen(jjtree)*/
                                         {
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
                                         }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void gRepaint() :
{/*@bgen(jjtree) gRepaint */
  ASTgRepaint jjtn000 = new ASTgRepaint(JJTGREPAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) gRepaint */
        try {
/*@egen*/
	<gRepaint> <RP>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void File_openr() :
{/*@bgen(jjtree) File_openr */
  ASTFile_openr jjtn000 = new ASTFile_openr(JJTFILE_OPENR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) File_openr */
        try {
/*@egen*/
	<OPENR> AddExpr() <RP>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void File_openw() :
{/*@bgen(jjtree) File_openw */
  ASTFile_openw jjtn000 = new ASTFile_openw(JJTFILE_OPENW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) File_openw */
        try {
/*@egen*/
	<OPENW> AddExpr() <RP>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void File_opena() :
{/*@bgen(jjtree) File_opena */
  ASTFile_opena jjtn000 = new ASTFile_opena(JJTFILE_OPENA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) File_opena */
        try {
/*@egen*/
	<OPENA> AddExpr() <RP>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void File_close() :
{/*@bgen(jjtree) File_close */
  ASTFile_close jjtn000 = new ASTFile_close(JJTFILE_CLOSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) File_close */
        try {
/*@egen*/
	<CLOSE> AddExpr() <RP>/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                               }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void File_getstr() :
{/*@bgen(jjtree) File_getstr */
  ASTFile_getstr jjtn000 = new ASTFile_getstr(JJTFILE_GETSTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) File_getstr */
        try {
/*@egen*/
	<GETSTR> AddExpr() <CM> AddExpr() <RP>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void File_getline() :
{/*@bgen(jjtree) File_getline */
  ASTFile_getline jjtn000 = new ASTFile_getline(JJTFILE_GETLINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) File_getline */
        try {
/*@egen*/
	<GETLINE> AddExpr() <RP>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void File_putstr() :
{/*@bgen(jjtree) File_putstr */
  ASTFile_putstr jjtn000 = new ASTFile_putstr(JJTFILE_PUTSTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) File_putstr */
        try {
/*@egen*/
	<PUTSTR> AddExpr() <CM> AddExpr() <RP>/*@bgen(jjtree)*/
                                               {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtc000 = false;
                                               }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void File_putline() :
{/*@bgen(jjtree) File_putline */
  ASTFile_putline jjtn000 = new ASTFile_putline(JJTFILE_PUTLINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) File_putline */
        try {
/*@egen*/
	<PUTLINE> AddExpr() <CM> AddExpr() <RP>/*@bgen(jjtree)*/
                                                {
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtc000 = false;
                                                }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void File_flush() :
{/*@bgen(jjtree) File_flush */
  ASTFile_flush jjtn000 = new ASTFile_flush(JJTFILE_FLUSH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) File_flush */
        try {
/*@egen*/
	<FLUSH> AddExpr() <RP>/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                               }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void File_isfile() :
{/*@bgen(jjtree) File_isfile */
  ASTFile_isfile jjtn000 = new ASTFile_isfile(JJTFILE_ISFILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) File_isfile */
        try {
/*@egen*/
	<ISFILE> AddExpr() <RP>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void File_rename() :
{/*@bgen(jjtree) File_rename */
  ASTFile_rename jjtn000 = new ASTFile_rename(JJTFILE_RENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) File_rename */
        try {
/*@egen*/
	<RENAME> AddExpr() <CM> AddExpr() <RP>/*@bgen(jjtree)*/
                                               {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtc000 = false;
                                               }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void File_remove() :
{/*@bgen(jjtree) File_remove */
  ASTFile_remove jjtn000 = new ASTFile_remove(JJTFILE_REMOVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) File_remove */
        try {
/*@egen*/
	<REMOVE> AddExpr() <RP>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Sleep() :
{/*@bgen(jjtree) Sleep */
  ASTSleep jjtn000 = new ASTSleep(JJTSLEEP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Sleep */
        try {
/*@egen*/
	<SLEEP> AddExpr() <RP>/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                               }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Ident() :
{/*@bgen(jjtree) Ident */
        ASTIdent jjtn000 = new ASTIdent(JJTIDENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/	Token t; }
{/*@bgen(jjtree) Ident */
        try {
/*@egen*/
	t=<IDENT> [
		LOOKAHEAD(2)(
			<LD> ArrayNum() <RD>
			|	<LP> [ AddExpr() ( <CM> AddExpr() )* ] <RP> { jjtn000.flag = false; }
		)
		]/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ jjtn000.varName = str2Half(t.image, t.beginLine); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}

void ArrayNum() :
{/*@bgen(jjtree) ArrayNum */
  ASTArrayNum jjtn000 = new ASTArrayNum(JJTARRAYNUM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArrayNum */
        try {
/*@egen*/
	AddExpr() [ <CM> ArrayNum() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void FunctionCall() :
{/*@bgen(jjtree) FunctionCall */
        ASTFunctionCall jjtn000 = new ASTFunctionCall(JJTFUNCTIONCALL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/	Token t; }
{/*@bgen(jjtree) FunctionCall */
        try {
/*@egen*/
	t=<IDENT> <LP> [  AddExpr() ( <CM> AddExpr() )* ] <RP> {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{
			jjtn000.varName = str2Half(t.image, t.beginLine);
			
		}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Return() :
{/*@bgen(jjtree) Return */
  ASTReturn jjtn000 = new ASTReturn(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Return */
        try {
/*@egen*/
	AddExpr() <RETURN>/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Break() :
{/*@bgen(jjtree) Break */
  ASTBreak jjtn000 = new ASTBreak(JJTBREAK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Break */
        try {
/*@egen*/
	<BREAK>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {jjtn000.line_num1 = jj_consume_token(SM).beginLine;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Literal() :
{/*@bgen(jjtree) Literal */
        ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/	Token t; }
{/*@bgen(jjtree) Literal */
        try {
/*@egen*/
	t=<LITERAL>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{
			try {
				if(Long.parseLong(t.image) > Integer.MAX_VALUE || Long.parseLong(t.image) <  Integer.MIN_VALUE){
					jjtn000.litValue = new Long(Long.parseLong(t.image));
				} else {
					jjtn000.litValue = new Integer(Integer.parseInt(t.image));
				}
			} catch (NumberFormatException e){
				jjtn000.litValue = new Double(Double.parseDouble(t.image));
			} catch (Exception e) {
				jjtn000.litValue = null;
				gui.consoleAppend.appendAll(
					"### " + t.beginLine + "\u884c\u76ee\u306f\u7121\u52b9\u306a\u5024\u3067\u3059 : "
					+ t.image + "\n"
				);
				throw new ParseException();
			}
		}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void FloatLiteral() :
{/*@bgen(jjtree) FloatLiteral */
        ASTFloatLiteral jjtn000 = new ASTFloatLiteral(JJTFLOATLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/	Token t; }
{/*@bgen(jjtree) FloatLiteral */
        try {
/*@egen*/
	t=<FLOAT_LITERAL>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{
			try {
				jjtn000.litValue = new Double(Double.parseDouble(t.image));
			} catch (NumberFormatException e){
				jjtn000.litValue = null;
				gui.consoleAppend.appendAll(
					"### NumberFormatException\n");
				gui.consoleAppend.appendAll(
					"### " + t.beginLine + "\u884c\u76ee\u306f\u7121\u52b9\u306a\u5024\u3067\u3059 : "
					+ t.image + "\n"
				);
				throw new ParseException();
			} catch (Exception e) {
				jjtn000.litValue = null;
				gui.consoleAppend.appendAll(
					"### " + t.beginLine + "\u884c\u76ee\u306f\u7121\u52b9\u306a\u5024\u3067\u3059 : "
					+ t.image + "\n"
				);
				throw new ParseException();
			}
		}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void True() :
{/*@bgen(jjtree) True */
  ASTTrue jjtn000 = new ASTTrue(JJTTRUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) True */
        try {
/*@egen*/
	<TRUE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void False() :
{/*@bgen(jjtree) False */
  ASTFalse jjtn000 = new ASTFalse(JJTFALSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) False */
        try {
/*@egen*/
	<FALSE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Strlit() :
{/*@bgen(jjtree) Strlit */
        ASTStrlit jjtn000 = new ASTStrlit(JJTSTRLIT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/	Token t; }
{/*@bgen(jjtree) Strlit */
        try {
/*@egen*/
	t=<STRLIT>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{	jjtn000.litString = t.image; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void EXTRA_STR() :
{/*@bgen(jjtree) EXTRA_STR */
  ASTEXTRA_STR jjtn000 = new ASTEXTRA_STR(JJTEXTRA_STR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EXTRA_STR */
        try {
/*@egen*/
	<EOF_STR>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/	{ jjtn000.char_code[0] = 0xFFFF; }
	| <NULL_STR>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/	{ jjtn000.char_code[0] = 0x0000; }
	| <LF_STR>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/	{ jjtn000.char_code[0] = 0x000A; }
	| <NL_STR>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/	{
				String str = System.getProperty("line.separator");
				if( str.length() > 1 ){
					jjtn000.char_code[1] = str.charAt(1);
				}
			}
	| <CR_STR>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/	{ jjtn000.char_code[0] = 0x000D; }
	| <HT_STR>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/	{ jjtn000.char_code[0] = 0x0009; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}