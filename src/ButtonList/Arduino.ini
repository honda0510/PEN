@@描画関数@24
ウィンドウ操作@24@255,160,160
gOpenWindow()@8@255,160,160@gOpenWindow(≪横幅≫, ≪縦幅≫)@幅 ≪横幅≫, 高さ ≪縦幅≫ の描画ウィンドウを作成する
gOpenGraphWindow()@16@255,160,160@gOpenGraphWindow(≪横幅≫, ≪縦幅≫, ≪x座標1≫, ≪y座標1≫, ≪x座標2≫, ≪y座標2≫)@幅 ≪横幅≫, 高さ ≪縦幅≫の描画ウィンドを開き、<br>xの領域を≪x座標1≫〜≪x座標2≫, yの領域≪y座標1≫〜≪y座標2≫とする
gCloseWindow()@8@255,160,160@gCloseWindow()@描画ウィンドウを閉じる
gClearWindow()@8@255,160,160@gClearWindow()@描画ウィンドウを白紙にする
gSaveWindow()@8@255,160,160@gSaveWindow(≪path≫, ≪mode≫)@描画ウィンドウを保存する
属性値設定@24@160,255,160
gSetLineColor()@8@160,255,160@gSetLineColor(≪赤≫, ≪緑≫, ≪青≫)@線の色属性を赤・緑・青の要素を 0〜255 の間で指定
gSetLineShape()@8@160,255,160@gSetLineShape(≪タイプ≫)@描画する線のタイプを設定する
gSetLineWidth()@8@160,255,160@gSetLineWidth(≪太さ≫)@描画する線の太さを設定する
gSetFillColor()@8@160,255,160@gSetFillColor(≪赤≫, ≪緑≫, ≪青≫)@塗り潰しの色属性を<br>赤・緑・青の要素を 0〜255 の間で指定
gSetDotShape()@8@160,255,160@gSetDotShape(≪タイプ≫)@gDrawPoint()で描く点の種類を指定する
gSetTextColor()@8@160,255,160@gSetTextColor(≪赤≫, ≪緑≫, ≪青≫)@文字列を描画する場合の色属性を<br>赤・緑・青の要素を 0〜255 の間で指定
gSetFont()@8@160,255,160@gSetFont(≪種類≫)@gDrawText()で描画するフォントの種類を指定する
gSetFontType()@8@160,255,160@gSetFontType(≪スタイル≫)@gDrawText()で描画するフォントスタイルを指定する
gSetFontSize()@8@160,255,160@gSetFontSize(≪サイズ≫)@gDrawText()で描画するフォントサイズを指定する
gSetArrowType()@8@160,255,160@gSetArrowType(≪タイプ≫)@矢じりの種類を指定する
gSetArrowDir()@8@160,255,160@gSetArrowDir(≪edge≫)@矢じりを付加する箇所を指定する
gSetOrigin()@8@160,255,160@gSetOrigin(≪x座標≫, ≪y座標≫)@原点を(≪x座標≫, ≪y座標≫)に変更する
gSetMap()@8@160,255,160@gSetMap(≪x座標1≫, ≪y座標1≫, ≪x座標2≫, ≪y座標2≫)@xの領域を≪x座標1≫〜≪x座標2≫, yの領域≪y座標1≫〜≪y座標2≫に変更する
 @16@160,255,160
描画命令@24@160,160,255
gDrawText()@8@160,160,255@gDrawText(≪文字列≫, ≪x座標≫, ≪y座標≫)@≪x座標≫, ≪y座標≫から≪文字列≫を描画する
gDrawPoint()@8@160,160,255@gDrawPoint(≪x座標≫, ≪y座標≫)@≪x座標≫, ≪y座標≫に点を描画する
gDrawLine()@8@160,160,255@gDrawLine(≪始点x≫, ≪始点y≫, ≪終点x≫, ≪終点y≫)@≪始点x≫, ≪始点y≫から≪終点x≫, ≪終点y≫まで線を描画する
gDrawBox()@8@160,160,255@gDrawBox(≪x座標≫, ≪y座標≫, ≪横幅≫, ≪縦幅≫)@≪x座標≫, ≪y座標≫から≪横幅≫, ≪縦幅≫の矩形を描画する
gDrawOval()@8@160,160,255@gDrawOval(≪x座標≫, ≪y座標≫, ≪横幅≫, ≪縦幅≫)@≪x座標≫, ≪y座標≫から≪横幅≫, ≪縦幅≫の楕円を描画する
gDrawCircle()@8@160,160,255@gDrawCircle(≪x座標≫, ≪y座標≫, ≪半径≫)@≪x座標≫, ≪y座標≫を中心とした≪半径≫の円を描画する
gFillBox()@8@160,160,255@gFillBox(≪x座標≫, ≪y座標≫, ≪横幅≫, ≪縦幅≫)@≪x座標≫, ≪y座標≫から≪横幅≫, ≪縦幅≫の塗り潰し矩形を描画する
gFillOval()@8@160,160,255@gFillOval(≪x座標≫, ≪y座標≫, ≪横幅≫, ≪縦幅≫)@≪x座標≫, ≪y座標≫から≪横幅≫, ≪縦幅≫の塗り潰し楕円を描画する
gFillCircle()@8@160,160,255@gFillCircle(≪x座標≫, ≪y座標≫, ≪半径≫)@≪x座標≫, ≪y座標≫を中心とした≪半径≫の塗り潰し円を描画する
gDrawArc()@8@160,160,255@gDrawArc(≪x座標≫, ≪y座標≫, ≪横幅≫, ≪縦幅≫, ≪開始角度≫, ≪終了角度≫, ≪閉じ方≫)@≪x座標≫, ≪y座標≫から≪横幅≫, ≪縦幅≫の円弧を描画する
gFillArc()@8@160,160,255@gFillArc(≪x座標≫, ≪y座標≫, ≪横幅≫, ≪縦幅≫, ≪開始角度≫, ≪終了角度≫, ≪閉じ方≫)@≪x座標≫, ≪y座標≫から≪横幅≫, ≪縦幅≫の塗り潰し円弧を描画する
gDrawPolygon()@8@160,160,255@gDrawPolygon(≪x座標[]≫, ≪y座標[]≫, ≪頂点数≫)@≪x座標[]≫と≪y座標[]≫の配列で定義された閉じた多角形を描画する
gFillPolygon()@8@160,160,255@gFillPolygon(≪x座標[]≫, ≪y座標[]≫, ≪頂点数≫)@≪x座標[]≫と≪y座標[]≫の配列で定義された塗り潰しの閉じた多角形を描画する
gDrawPolyline()@8@160,160,255@gDrawPolyline(≪x座標[]≫, ≪y座標[]≫, ≪頂点数≫)@≪x座標[]≫と≪y座標[]≫の配列で定義され連続的につながった直線を描画する
gDrawImage()@8@160,160,255@gDrawImage(≪file≫, ≪x座標≫, ≪y座標≫)@画像ファイル file を≪x座標≫, ≪y座標≫に描画する
gDrawImage()@8@160,160,255@gDrawImage(≪file≫, ≪x座標≫, ≪y座標≫, ≪横幅≫, ≪縦幅≫)@画像ファイル file を≪x座標≫, ≪y座標≫に≪横幅≫, ≪縦幅≫として描画する
 @16@160,160,255


@@ファイルI/O@24
ファイルオープン@24@255,160,160
openr()@6@255,160,160@openr(≪file≫)@ファイル名 file を読み込みモードで開き、<br>ファイル識別番号を表す整数を返す
openw()@6@255,160,160@openw(≪file≫)@ファイル名 file を書き込みモードで開き、<br>ファイル識別番号を表す整数を返す
opena()@6@255,160,160@opena(≪file≫)@ファイル名 file を追加書き込みモードで開き、<br>ファイル識別番号を表す整数を返す
close()@6@255,160,160@close(≪fd≫)@ファイル識別番号 fd が表すファイルを閉じる
入出力@24@160,255,160
getstr()@6@160,255,160@getstr(≪fd≫,≪式≫)@ファイル識別番号 fd で指定したファイルから<br>≪式≫ 文字読み込み、文字列として返す 
getline()@6@160,255,160@getline(≪fd≫)@ファイル識別番号 fd で指定したファイルから<br>1 行読み込み、文字列として返す
putstr()@6@160,255,160@putstr(≪fd≫, ≪文字列≫)@ファイル識別番号 fd で指定したファイルに<br>≪文字列≫を書き込む 
putline()@6@160,255,160@putline(≪fd≫, ≪文字列≫)@ファイル識別番号 fd で指定したファイルに<br>≪文字列≫と改行文字を書き込む
ファイル操作@24@160,160,255
isfile()@6@160,160,255@isfile(≪file≫)@ファイル名 file が存在するかを調べ、<br>ファイルが存在する場合「true」/存在しない場合「false」を返す
rename()@6@160,160,255@rename(≪file1≫, ≪file2≫)@ファイル名 file1 で指定されたファイルを<br>file2 という名前に変更する 
flush()@6@160,160,255@flush(≪fd≫)@ファイル識別番号 fd で指定したファイルで<br>書き込み途中のデータがあれば強制的に書き込みを実行する
remove()@6@160,160,255@remove(≪file≫)@ファイル名 file で指定されたファイルを削除する


@@文字列関数@24
str2int()@8@160,160,255@str2int(≪文字列≫)@str2int(str)<br>str の1 文字目をASCII コードの数値に変換
int2str()@8@160,160,255@int2str(≪式≫)@int2str(int)<br>引数int をASCII コードと見なしたときの対応する文字を返す
length()@8@160,160,255@length(≪文字列≫)@length(str)<br>str の文字列の長さを返す
compare()@8@160,160,255@compare(≪文字列≫,≪文字列≫)@compare(str1, str2)<br>2つの文字列を辞書式に比較し、整数の値を返す
append()@8@160,160,255@append(≪文字列≫, ≪文字列≫)@append(str1, str2)<br>str1 とstr2 を結合した文字列を返す
substring()@8@160,160,255@substring(≪文字列≫, ≪式≫)@substring(str, i)<br>str の先頭からi文字よりも後の文字列を返す
substring()@8@160,160,255@substring(≪文字列≫, ≪式≫, ≪式≫)@substring(str, i, len)<br>str の先頭からi文字よりも後ろのlen 文字を返す
insert()@8@160,160,255@insert(≪文字列≫, ≪式≫, ≪文字列≫)@insert(str1, i, str2)<br>str1 のi 文字目の後にstr2 を挿入する
replace()@8@160,160,255@replace(≪文字列≫, ≪式≫, ≪式≫, ≪文字列≫)@replace(str1, i, j, str2)<br>str1 のi 文字目の後からlen で示される文字数をstr2 で置き換える
extract()@8@160,160,255@extract(≪文字列≫, ≪文字列≫, ≪式≫)@extract(str1, delim, i)<br>文字列str をdelim で区切り，i+1 個目にある文字列を返す


@@Arduino関数@24
シリアル通信@24@
openPort()@8@@openPort(≪ポート≫)@シリアル通信のためのポートを開く
closePort()@8@@closePort()@シリアル通信のためのポートを閉じる
portList()@8@@portList(≪式≫)@シリアル通信可能のポートを返す
portListLength()@12@@portListLength()@シリアル通信可能のポート数を返す
制御用関数@24@
pinMode()@8@@pinMode(≪式≫, ≪文字列≫)@pinの入出力モードの設定
digitalRead()@8@@digitalRead(≪式≫)@ディジタル入力からデータを読み込み
digitalWrite()@8@@digitalWrite(≪式≫, ≪式≫)@ディジタル出力へデータを書き込み
analogRead()@12@@analogRead(≪式≫)@アナログ入力からデータを読み込み
analogWrite()@12@@analogWrite(≪式≫, ≪式≫)@アナログ出力へデータを書き込み¥


@@MainButton
プログラム入力支援ボタン（Arduino版）@48
もし@12@140,220,200@もし ≪条件式≫ ならば<br>  | <br>を実行する
もし〜そうでなければ@12@140,220,200@もし ≪条件式≫ ならば<br>  | <br>を実行し，そうでなければ<br>  | <br>を実行する
そうでなくもし〜@12@120,200,180@を実行し，そうでなくもし ≪条件式≫ ならば<br>  | <br>
〜の間，繰り返す@12@160,220,200@≪条件式≫ の間，<br>  | <br>を繰り返す
増やしながら繰り返す@12@180,220,200@≪変数≫ を ≪式≫ から ≪式≫ まで 1 ずつ増やしながら，<br>  | <br>を繰り返す
減らしながら繰り返す@12@180,220,200@≪変数≫ を ≪式≫ から ≪式≫ まで 1 ずつ減らしながら，<br>  | <br>を繰り返す
入力@6@255,255,204@≪変数≫ ← input()
出力@6@255,255,204@≪出力文≫ を表示する
改行無出力@6@255,255,204@≪出力文≫ を改行なしで表示する
代入@6@255,255,204@≪変数≫ ← ≪式≫
整数@6@255,204,255@整数 ≪変数≫
実数@6@255,204,255@実数 ≪変数≫
文字列@6@255,204,255@文字列 ≪変数≫
描画関数@6@204,204,204@描画関数の一覧を表示します
ファイルI/O@7@204,204,204@ファイルI/O関数の一覧を表示します
文字列関数@7@204,204,204@文字操作関数の一覧を表示します
Arduino関数@6@204,204,204@数学的関数の一覧を表示します
「」@4@255,220,255@「≪文字列≫」